<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
<title>HLint report</title>
<script type='text/javascript'>
var hints = {};
var files = {};
var items = [];

var link_sel = 1;
var link_count = 0;

// <CONTENT>
idea("Warning: Redundant brackets","CommandLine.lhs",44,1,"(quotedArg ftable <|> unquotedArg ftable)","quotedArg ftable <|> unquotedArg ftable");
idea("Warning: Use string literal","CommandLine.lhs",46,1,"[' ', '\\t', '\"', '%']","\" \\t\\\"%\"");
idea("Error: Redundant do","CommandLine.lhs",46,1,"do (try $ format ftable) <|> (many1 $ noneOf [' ', '\\t', '\"', '%'])","(try $ format ftable) <|> (many1 $ noneOf [' ', '\\t', '\"', '%'])");
idea("Warning: Eta reduce","CommandLine.lhs",49,1,"quotedArg ftable\n  = between (char '\"') (char '\"') $ quoteContent ftable","quotedArg = between (char '\"') (char '\"') . quoteContent");
idea("Warning: Use string literal","CommandLine.lhs",51,29,"['\"', '\\\\', '%']","\"\\\"\\\\%\"");
idea("Warning: Redundant brackets","CommandLine.lhs",51,29,"escape <|> (try $ format ftable) <|>\n  (many1 (noneOf ['\"', '\\\\', '%']))","escape <|> (try $ format ftable) <|>\n  many1 (noneOf ['\"', '\\\\', '%'])");
idea("Error: Redundant do","CommandLine.lhs",77,1,"do skipMany1 space","skipMany1 space");
idea("Warning: Eta reduce","CommandLine.lhs",91,1,"parseCmd ftable s = parse (commandline ftable) \"\" s","parseCmd ftable = parse (commandline ftable) \"\"");
idea("Error: Use concatMap","CommandLine.lhs",94,1,"concat $ map escapeC s","concatMap escapeC s");
idea("Warning: Use ***","CommandLine.lhs",103,1,"\\ (c, x) -> (toUpper c, urlEncode x)","toUpper *** urlEncode");
idea("Warning: Redundant brackets","CommandLine.lhs",103,1,"ftable ++ (map (\\ (c, x) -> (toUpper c, urlEncode x)) ftable)","ftable ++ map (\\ (c, x) -> (toUpper c, urlEncode x)) ftable");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Warning: Use head","darcs.lhs",674,1,"argv !! 0","head argv");
idea("Error: Redundant $","darcs.lhs",674,1,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Redundant $","darcs.lhs",674,1,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Redundant $","darcs.lhs",674,1,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Use mapM","darcs.lhs",724,20,"sequence $\n  map (\\ c -> withCurrentDirectory here $ (command_prereq c) [])\n    (extract_commands command_control_list)","mapM (\\ c -> withCurrentDirectory here $ (command_prereq c) [])\n  (extract_commands command_control_list)");
idea("Warning: Redundant brackets","darcs.lhs",725,25,"(command_prereq c) []","command_prereq c []");
idea("Error: Redundant $","darcsman.hs",56,9,"putStrLn $ \".TP\"","putStrLn \".TP\"");
idea("Warning: Eta reduce","DateMatcher.lhs",49,1,"dateRange a b c\n  = cDateRange (unsafeToCalendarTime a) (unsafeToCalendarTime b) c","dateRange a b\n  = cDateRange (unsafeToCalendarTime a) (unsafeToCalendarTime b)");
idea("Warning: Eta reduce","DateTester.lhs",50,1,"testDateAt iso d = testDateAtCal (readUTCDate iso) d","testDateAt = testDateAtCal . readUTCDate");
idea("Warning: Use >>=","DateTester.lhs",54,1,"do ms <- getMatchers d\n   putStr . unlines . map (showMatcher c) $ ms","getMatchers d >>= (putStr . unlines . map (showMatcher c))");
idea("Warning: Redundant brackets","Exec.lhs",97,1,"bracketOnError\n  (do whenDebugMode $\n        putStrLn $\n          unwords $ cmd : args ++ [\"; #\"] ++ map show [inp, out, err]\n      runProcess cmd args Nothing Nothing h_stdin h_stdout h_stderr)\n  (terminateProcess)\n  (waitForProcess)","bracketOnError\n  (do whenDebugMode $\n        putStrLn $\n          unwords $ cmd : args ++ [\"; #\"] ++ map show [inp, out, err]\n      runProcess cmd args Nothing Nothing h_stdin h_stdout h_stderr)\n  (terminateProcess)\n  waitForProcess");
idea("Warning: Redundant brackets","Exec.lhs",97,1,"bracketOnError\n  (do whenDebugMode $\n        putStrLn $\n          unwords $ cmd : args ++ [\"; #\"] ++ map show [inp, out, err]\n      runProcess cmd args Nothing Nothing h_stdin h_stdout h_stderr)\n  (terminateProcess)","bracketOnError\n  (do whenDebugMode $\n        putStrLn $\n          unwords $ cmd : args ++ [\"; #\"] ++ map show [inp, out, err]\n      runProcess cmd args Nothing Nothing h_stdin h_stdout h_stderr)\n  terminateProcess");
idea("Error: Redundant do","Exec.lhs",132,7,"do case oldval of\n       Nothing -> unsetEnv var\n       Just val -> setEnv var val True","case oldval of\n    Nothing -> unsetEnv var\n    Just val -> setEnv var val True");
idea("Error: Redundant do","Exec.lhs",140,1,"do system $ cmd ++ \" \" ++ arg","system $ cmd ++ \" \" ++ arg");
idea("Error: Redundant do","Exec.lhs",154,1,"do setFdOption stdInput NonBlockingRead False","setFdOption stdInput NonBlockingRead False");
idea("Error: Redundant do","Exec.lhs",154,1,"do x","x");
idea("Warning: Use const","Exec.lhs",160,22,"\\ _ -> x","const x");
idea("Error: Redundant do","Exec.lhs",163,1,"do x","x");
idea("Error: Use unless","HTTP.hs",34,5,"when (not $ null proxy) $\n  debugFail\n    \"No proxy support for HTTP package yet (try libcurl or libwww)!\"","unless (null proxy)\n  (debugFail\n     \"No proxy support for HTTP package yet (try libcurl or libwww)!\")");
idea("Error: Redundant $","HTTP.hs",38,25,"simpleHTTP $\n  Request{rqURI = uri, rqMethod = GET, rqHeaders = headers,\n          rqBody = \"\"}","simpleHTTP\n  Request{rqURI = uri, rqMethod = GET, rqHeaders = headers,\n          rqBody = \"\"}");
idea("Error: Use unless","HTTP.hs",50,5,"when (not $ null proxy) $\n  debugFail\n    \"No proxy support for HTTP package yet (try libcurl or libwww)!\"","unless (null proxy)\n  (debugFail\n     \"No proxy support for HTTP package yet (try libcurl or libwww)!\")");
idea("Error: Redundant $","HTTP.hs",54,25,"simpleHTTP $\n  Request{rqURI = uri, rqMethod = POST,\n          rqHeaders =\n            headers ++\n              [Header HdrContentType mime, Header HdrAccept \"text/plain\",\n               Header HdrContentLength (show $ length body)],\n          rqBody = body}","simpleHTTP\n  Request{rqURI = uri, rqMethod = POST,\n          rqHeaders =\n            headers ++\n              [Header HdrContentType mime, Header HdrAccept \"text/plain\",\n               Header HdrContentLength (show $ length body)],\n          rqBody = body}");
idea("Error: Use all","IsoDate.lhs",74,1,"and (map isDigit $ take 14 d)","all isDigit (take 14 d)");
idea("Warning: Redundant brackets","IsoDate.lhs",295,25,"10 ^ (picoExp - digsExp) * (read digs)","10 ^ (picoExp - digsExp) * read digs");
idea("Error: Redundant $","IsoDate.lhs",296,26,"Just $ frac","Just frac");
idea("Error: Redundant do","IsoDate.lhs",298,22,"do char '+' >> return 1","char '+' >> return 1");
idea("Error: Redundant do","IsoDate.lhs",298,22,"do char '-' >> return (- 1)","char '-' >> return (- 1)");
idea("Warning: Redundant brackets","IsoDate.lhs",354,23,"if (unset x) then 0 else x","if unset x then 0 else x");
idea("Error: Redundant $","IsoDate.lhs",415,1,"intToMonth $ (read mn :: Int)","intToMonth (read mn :: Int)");
idea("Warning: Use string literal","IsoDate.lhs",480,1,"[' ']","\" \"");
idea("Error: Redundant $","IsoDate.lhs",522,4,"fromMaybe id t $ ed","fromMaybe id t ed");
idea("Error: Redundant $","IsoDate.lhs",528,4,"unsetTime $ ed","unsetTime ed");
idea("Error: Redundant do","IsoDate.lhs",564,1,"do space","space");
idea("Warning: Redundant brackets","IsoDate.lhs",593,4,"(unsafeToCalendarTime `fmap` iso8601_date_time (ctTZ now) <|>\n   englishDateTime now)","unsafeToCalendarTime `fmap` iso8601_date_time (ctTZ now) <|>\n  englishDateTime now");
idea("Warning: Redundant brackets","IsoDate.lhs",767,1,"a7 * (toInteger m)","a7 * toInteger m");
idea("Warning: Redundant brackets","list_authors.hs",31,1,"if do_stats then \"\" else\n  (\"Run \" ++\n     formatPath (prog_name ++ \" stats\") ++\n       \" for more detailed information.\\n\" ++ \"\\n\")","if do_stats then \"\" else\n  \"Run \" ++\n    formatPath (prog_name ++ \" stats\") ++\n      \" for more detailed information.\\n\" ++ \"\\n\"");
idea("Warning: Redundant brackets","list_authors.hs",189,1,"(uncurry add_name_to_mail) $ head eaLst","uncurry add_name_to_mail $ head eaLst");
idea("Warning: Use &&&","list_authors.hs",196,1,"\\ s -> (length s, head s)","length &&& head");
idea("Error: Use print","microbench.hs",38,44,"putStrLn (show e)","print e");
idea("Error: Use all","OldDate.lhs",43,1,"and (map isDigit $ take 14 d)","all isDigit (take 14 d)");
idea("Warning: Redundant brackets","OldDate.lhs",194,20,"(7 * w) + wd - (fromEnum firstDay)","(7 * w) + wd - fromEnum firstDay");
idea("Warning: Redundant brackets","OldDate.lhs",231,25,"10 ^ (picoExp - digsExp) * (read digs)","10 ^ (picoExp - digsExp) * read digs");
idea("Error: Redundant do","OldDate.lhs",234,22,"do char '+' >> return 1","char '+' >> return 1");
idea("Error: Redundant do","OldDate.lhs",234,22,"do char '-' >> return (- 1)","char '-' >> return (- 1)");
idea("Error: Redundant $","OldDate.lhs",274,1,"intToMonth $ (read mn :: Int)","intToMonth (read mn :: Int)");
idea("Warning: Use string literal","OldDate.lhs",322,1,"[' ']","\" \"");
idea("Error: Use when","preproc.hs",15,1,"if length args < 1 then exitWith $ ExitFailure 1 else return ()","when (length args < 1) $ exitWith $ ExitFailure 1");
idea("Warning: Eta reduce","Printer.lhs",127,1,"hPutDocWith prs h d = hPrintPrintables h (renderWith (prs h) d)","hPutDocWith prs h = hPrintPrintables h . renderWith (prs h)");
idea("Warning: Eta reduce","Printer.lhs",140,1,"hPrintPrintables h = mapM_ (hPrintPrintable h)","hPrintPrintables = mapM_ . hPrintPrintable");
idea("Warning: Eta reduce","Printer.lhs",203,1,"renderPSWith prs d = concatPS $ renderPSsWith prs d","renderPSWith prs = concatPS . renderPSsWith prs");
idea("Warning: Eta reduce","Printer.lhs",252,1,"unsafeBoth s ps = Doc $ simplePrinter (Both s ps)","unsafeBoth s = Doc . simplePrinter . Both s");
idea("Warning: Redundant brackets","Printer.lhs",308,9,"(a : d)","a : d");
idea("Warning: Eta reduce","Printer.lhs",359,1,"doc f = Doc $ return $ Document f","doc = Doc . return . Document");
idea("Warning: Use const","RegChars.lhs",51,22,"\\ _ -> False","const False");
idea("Warning: Redundant brackets","SHA1.lhs",174,8,"(complement x) .&. z","complement x .&. z");
idea("Error: Redundant $","Ssh.hs",65,30,"unlines $\n  [\"NOTE: the server may be running a version of darcs prior to 2.0.0.\",\n   \"\",\n   \"Installing darcs 2 on the server will speed up ssh-based commands.\"]","unlines\n  [\"NOTE: the server may be running a version of darcs prior to 2.0.0.\",\n   \"\",\n   \"Installing darcs 2 on the server will speed up ssh-based commands.\"]");
idea("Warning: Redundant brackets","Ssh.hs",151,17,"(take 5 ns) ++ [\"and \" ++ (show (length ns - 5)) ++ \" more\"]","take 5 ns ++ [\"and \" ++ (show (length ns - 5)) ++ \" more\"]");
idea("Warning: Redundant brackets","Ssh.hs",151,17,"(show (length ns - 5)) ++ \" more\"","show (length ns - 5) ++ \" more\"");
idea("Warning: Use list comprehension","Ssh.hs",155,17,"if take 1 path == \"~\" then\n  [\"sftp doesn't expand ~, use path/ instead of ~/path/\"] else []","[\"sftp doesn't expand ~, use path/ instead of ~/path/\" |\n take 1 path == \"~\"]");
idea("Error: Use isPrefixOf","Ssh.hs",155,17,"take 1 path == \"~\"","\"~\" `isPrefixOf` path");
idea("Error: Use unless","Ssh.hs",190,13,"when (not hasLaunchedCm) $ launchSSHControlMaster remoteAddr","unless hasLaunchedCm (launchSSHControlMaster remoteAddr)");
idea("Warning: Use list comprehension","Ssh.hs",190,13,"if hasCmFeature then [\"-o ControlPath=\" ++ cmPath] else []","[\"-o ControlPath=\" ++ cmPath | hasCmFeature]");
idea("Warning: Eta reduce","UglyFileName.lhs",45,1,"fp2fn fp = FN fp","fp2fn = FN");
idea("Warning: Redundant brackets","UglyFileName.lhs",74,5,"\"\" : (drop_dotdot' b)","\"\" : drop_dotdot' b");
idea("Warning: Redundant brackets","UglyFileName.lhs",79,11,"\"..\" : (drop_dotdot' p)","\"..\" : drop_dotdot' p");
idea("Warning: Redundant brackets","unit.lhs",102,5,"(show (length primitive_test_patches)) ++ \" primitive patches.\\n\"","show (length primitive_test_patches) ++ \" primitive patches.\\n\"");
idea("Warning: Redundant brackets","unit.lhs",102,5,"(show (length test_patches)) ++ \" patches.\\n\"","show (length test_patches) ++ \" patches.\\n\"");
idea("Warning: Redundant brackets","unit.lhs",210,1,"(thetest p) ++ (unit_tester thetest ps)","thetest p ++ unit_tester thetest ps");
idea("Warning: Redundant brackets","unit.lhs",214,1,"(thetest p1 p2) ++ (parallel_pair_unit_tester thetest ps)","thetest p1 p2 ++ parallel_pair_unit_tester thetest ps");
idea("Warning: Redundant brackets","unit.lhs",219,1,"(thetest p1 p2) ++ (pair_unit_tester thetest ps)","thetest p1 p2 ++ pair_unit_tester thetest ps");
idea("Warning: Redundant brackets","unit.lhs",232,1,"(show (ca, cb)) ++\n  \" expected \" ++\n    (show (ca', cb')) ++ \" got \" ++ (show (ca_res, cb_res)) ++ \"\\n\"","show (ca, cb) ++\n  \" expected \" ++\n    (show (ca', cb')) ++ \" got \" ++ (show (ca_res, cb_res)) ++ \"\\n\"");
idea("Warning: Redundant brackets","unit.lhs",232,1,"(show (ca', cb')) ++ \" got \" ++ (show (ca_res, cb_res)) ++ \"\\n\"","show (ca', cb') ++ \" got \" ++ (show (ca_res, cb_res)) ++ \"\\n\"");
idea("Warning: Redundant brackets","unit.lhs",232,1,"(show (ca_res, cb_res)) ++ \"\\n\"","show (ca_res, cb_res) ++ \"\\n\"");
idea("Warning: Redundant brackets","unit.lhs",235,12,"nilPS : (toPS sa)","nilPS : toPS sa");
idea("Warning: Redundant brackets","unit.lhs",236,12,"nilPS : (toPS sb)","nilPS : toPS sb");
idea("Warning: Redundant brackets","unit.lhs",281,5,"(show p) ++ \"\\n\"","show p ++ \"\\n\"");
idea("Warning: Redundant brackets","unit.lhs",283,5,"(show p) ++ \"\\n\"","show p ++ \"\\n\"");
idea("Warning: Eta reduce","unit.lhs",323,1,"quickhunk l o n\n  = fromPrim $\n      hunk \"test\" l (map (\\ c -> packString [c]) o)\n        (map (\\ c -> packString [c]) n)","quickhunk l o\n  = fromPrim .\n      hunk \"test\" l (map (\\ c -> packString [c]) o) .\n        map (\\ c -> packString [c])");
idea("Warning: Redundant brackets","unit.lhs",333,1,"[(p1 :\\/: p2) | i <- [0 .. (length test_patches) - 1],\n p1 <- [test_patches !! i], p2 <- drop i test_patches,\n check_a_patch $ join_patches [invert p2, p1]]","[p1 :\\/: p2 | i <- [0 .. (length test_patches) - 1],\n p1 <- [test_patches !! i], p2 <- drop i test_patches,\n check_a_patch $ join_patches [invert p2, p1]]");
idea("Warning: Redundant brackets","unit.lhs",335,20,"(length test_patches) - 1","length test_patches - 1");
idea("Warning: Redundant brackets","unit.lhs",339,3,"(parallel_pair_unit_tester t_merge_either_way_valid merge_pairs) ++\n  (parallel_pair_unit_tester t_merge_swap_merge merge_pairs)","parallel_pair_unit_tester t_merge_either_way_valid merge_pairs ++\n  parallel_pair_unit_tester t_merge_swap_merge merge_pairs");
idea("Warning: Redundant brackets","unit.lhs",379,1,"[(p2 :< p1) | p1 <- test_patches,\n p2 <- filter (\\ p -> checkseq [p1, p]) test_patches,\n commutex (p2 :< p1) /= Nothing]","[p2 :< p1 | p1 <- test_patches,\n p2 <- filter (\\ p -> checkseq [p1, p]) test_patches,\n commutex (p2 :< p1) /= Nothing]");
idea("Warning: Eta reduce","unit.lhs",385,9,"checkseq ps = check_a_patch $ join_patches ps","checkseq = check_a_patch . join_patches");
idea("Warning: Redundant brackets","unit.lhs",387,1,"[(p1 :< p2) | p1 <- primitive_test_patches,\n p2 <- primitive_test_patches, commutex (p1 :< p2) /= Nothing,\n check_a_patch $ join_patches [p2, p1]]","[p1 :< p2 | p1 <- primitive_test_patches,\n p2 <- primitive_test_patches, commutex (p1 :< p2) /= Nothing,\n check_a_patch $ join_patches [p2, p1]]");
idea("Warning: Redundant brackets","unit.lhs",395,1,"(show p1) ++\n  (show p2) ++\n    \"we saw it as:\\n\" ++\n      show (commutex (p1 :< p2)) ++\n        \"\\nAnd recommute was:\\n\" ++\n          show (commutex (p1 :< p2) >>= commutex) ++ \"\\n\"","show p1 ++\n  (show p2) ++\n    \"we saw it as:\\n\" ++\n      show (commutex (p1 :< p2)) ++\n        \"\\nAnd recommute was:\\n\" ++\n          show (commutex (p1 :< p2) >>= commutex) ++ \"\\n\"");
idea("Warning: Redundant brackets","unit.lhs",395,1,"(show p2) ++\n  \"we saw it as:\\n\" ++\n    show (commutex (p1 :< p2)) ++\n      \"\\nAnd recommute was:\\n\" ++\n        show (commutex (p1 :< p2) >>= commutex) ++ \"\\n\"","show p2 ++\n  \"we saw it as:\\n\" ++\n    show (commutex (p1 :< p2)) ++\n      \"\\nAnd recommute was:\\n\" ++\n        show (commutex (p1 :< p2) >>= commutex) ++ \"\\n\"");
idea("Warning: Redundant brackets","unit.lhs",431,1,"fromPrim (rmfile \"NwNSO\") :<\n  (quickmerge\n     (fromPrim (addfile \"hello\") :\\/: fromPrim (addfile \"hello\")))","fromPrim (rmfile \"NwNSO\") :<\n  quickmerge\n    (fromPrim (addfile \"hello\") :\\/: fromPrim (addfile \"hello\"))");
idea("Warning: Redundant brackets","unit.lhs",431,1,"(quickmerge\n   (fromPrim (addfile \"hello\") :\\/: fromPrim (addfile \"hello\")))\n  :< fromPrim (rmfile \"NwNSO\")","quickmerge\n  (fromPrim (addfile \"hello\") :\\/: fromPrim (addfile \"hello\"))\n  :< fromPrim (rmfile \"NwNSO\")");
idea("Warning: Redundant brackets","unit.lhs",488,1,"hunk \"test\" 1 ([packString \"a\"]) ([packString \"b\"])","hunk \"test\" 1 ([packString \"a\"]) [packString \"b\"]");
idea("Warning: Redundant brackets","unit.lhs",488,1,"hunk \"test\" 1 ([packString \"a\"])","hunk \"test\" 1 [packString \"a\"]");
idea("Warning: Eta reduce","unit.lhs",555,9,"testhunk l o n = fromPrim $ hunk \"test\" l o n","testhunk l o = fromPrim . hunk \"test\" l o");
idea("Warning: Use list comprehension","unit.lhs",637,13,"if p1'b /= p1' then\n  [\"Merge swapping problem with...\\np1 \" ++\n     show p1 ++\n       \"merged with\\np2 \" ++\n         show p2 ++\n           \"p1' is\\np1' \" ++ show p1' ++ \"p1'b is\\np1'b  \" ++ show p1'b]\n  else []","[\"Merge swapping problem with...\\np1 \" ++\n   show p1 ++\n     \"merged with\\np2 \" ++\n       show p2 ++\n         \"p1' is\\np1' \" ++ show p1' ++ \"p1'b is\\np1'b  \" ++ show p1'b\n | p1'b /= p1']");
idea("Warning: Eta reduce","unit.lhs",722,11,"checkseq ps = check_a_patch $ join_patches ps","checkseq = check_a_patch . join_patches");
idea("Warning: Eta reduce","unit.lhs",730,11,"checkseq ps = check_a_patch $ join_patches ps","checkseq = check_a_patch . join_patches");
idea("Warning: Eta reduce","unit.lhs",736,11,"checkseq ps = check_a_patch $ join_patches ps","checkseq = check_a_patch . join_patches");
idea("Warning: Eta reduce","unit.lhs",743,11,"checkseq ps = check_a_patch $ join_patches ps","checkseq = check_a_patch . join_patches");
idea("Warning: Eta reduce","unit.lhs",751,11,"checkseq ps = check_a_patch $ join_patches ps","checkseq = check_a_patch . join_patches");
idea("Warning: Redundant brackets","URL.hs",163,15,"return . (Map.lookup u)","return . Map.lookup u");
idea("Warning: Redundant brackets","URL.hs",201,1,"return . (Map.insertWith fn u v)","return . Map.insertWith fn u v");
idea("Error: Redundant $","URL.hs",216,24,"liftIO $ wait_next_url","liftIO wait_next_url");
idea("Warning: Redundant brackets","URL.hs",242,18,"return . (Map.lookup u)","return . Map.lookup u");
idea("Warning: Redundant brackets","URL.hs",244,18,"return . (Map.delete u)","return . Map.delete u");
idea("Error: Redundant return","URL.hs",280,22,"do err <- libwww_request_url ustr fstr (cachableToInt cache) >>=\n            peekCString\n   return err","do libwww_request_url ustr fstr (cachableToInt cache) >>=\n     peekCString");
idea("Error: Redundant return","URL.hs",307,22,"do err <- curl_request_url ustr fstr (cachableToInt cache) >>=\n            peekCString\n   return err","do curl_request_url ustr fstr (cachableToInt cache) >>= peekCString");
idea("Warning: Redundant brackets","UTF8.lhs",125,7,"(fromIntegral cp) .&. 63","fromIntegral cp .&. 63");
idea("Warning: Redundant brackets","UTF8.lhs",134,7,"(fromIntegral cp) .&. 63","fromIntegral cp .&. 63");
idea("Warning: Redundant brackets","UTF8.lhs",135,7,"(fromIntegral (shiftR cp 6)) .&. 63","fromIntegral (shiftR cp 6) .&. 63");
idea("Warning: Redundant brackets","UTF8.lhs",145,7,"(fromIntegral cp) .&. 63","fromIntegral cp .&. 63");
idea("Warning: Redundant brackets","UTF8.lhs",146,7,"(fromIntegral (shiftR cp 6)) .&. 63","fromIntegral (shiftR cp 6) .&. 63");
idea("Warning: Redundant brackets","UTF8.lhs",147,7,"(fromIntegral (shiftR cp 12)) .&. 63","fromIntegral (shiftR cp 12) .&. 63");
idea("Error: Use replicate","Crypt/SHA256.hs",23,1,"take 64 $ repeat 'x'","replicate 64 'x'");
idea("Error: Redundant $","Darcs/ArgumentDefaults.lhs",125,7,"return $ f","return f");
idea("Warning: Eta reduce","Darcs/ArgumentDefaults.lhs",134,11,"gda' defs = concatMap (choose_option opt) defs","gda' = concatMap (choose_option opt)");
idea("Warning: Use string literal","Darcs/Arguments.lhs",434,1,"['h']","\"h\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",472,1,"['v']","\"v\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",472,1,"['q']","\"q\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",544,1,"['m']","\"m\"");
idea("Warning: Eta reduce","Darcs/Arguments.lhs",560,11,"mp s = OnePattern (patch_match s)","mp = OnePattern . patch_match");
idea("Warning: Eta reduce","Darcs/Arguments.lhs",578,11,"uptop s = UpToPattern (patch_match s)","uptop = UpToPattern . patch_match");
idea("Warning: Eta reduce","Darcs/Arguments.lhs",586,11,"fromp s = AfterPattern (patch_match s)","fromp = AfterPattern . patch_match");
idea("Warning: Use string literal","Darcs/Arguments.lhs",590,1,"['t']","\"t\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",592,1,"['t']","\"t\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",595,1,"['p']","\"p\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",597,1,"['p']","\"p\"");
idea("Warning: Eta reduce","Darcs/Arguments.lhs",602,9,"mp s = OnePattern (patch_match s)","mp = OnePattern . patch_match");
idea("Warning: Eta reduce","Darcs/Arguments.lhs",605,9,"mp s = SeveralPattern (patch_match s)","mp = SeveralPattern . patch_match");
idea("Error: Use all","Darcs/Arguments.lhs",609,11,"and (map isDigit s)","all isDigit s");
idea("Warning: Use string literal","Darcs/Arguments.lhs",613,1,"['n']","\"n\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",618,1,"['n']","\"n\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",662,1,"['l']","\"l\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",731,1,"['A']","\"A\"");
idea("Error: Redundant do","Darcs/Arguments.lhs",736,1,"do askUser \"Who is the author? \"","askUser \"Who is the author? \"");
idea("Error: Redundant do","Darcs/Arguments.lhs",742,5,"do askUser \"What is your email address (e.g. John Doe <a@b.com>)? \"","askUser \"What is your email address (e.g. John Doe <a@b.com>)? \"");
idea("Warning: Use liftM","Darcs/Arguments.lhs",757,1,"get_preflist \"author\" >>= return . firstNotBlank","liftM firstNotBlank (get_preflist \"author\")");
idea("Warning: Use liftM","Darcs/Arguments.lhs",757,1,"get_global \"author\" >>= return . firstNotBlank","liftM firstNotBlank (get_global \"author\")");
idea("Warning: Use string literal","Darcs/Arguments.lhs",785,1,"['s']","\"s\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",788,1,"['u']","\"u\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",790,1,"['u']","\"u\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",820,1,"['o']","\"o\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",825,1,"['O']","\"O\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",839,1,"['d']","\"d\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",844,1,"['r']","\"r\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",917,1,"['t']","\"t\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",941,1,"['f']","\"f\"");
idea("Error: Redundant $","Darcs/Arguments.lhs",1034,1,"putDocLn $ put_mode","putDocLn put_mode");
idea("Error: Redundant $","Darcs/Arguments.lhs",1034,1,"text $ \"\"","text \"\"");
idea("Error: Redundant $","Darcs/Arguments.lhs",1034,1,"text $ \"Making no changes:  this is a dry run.\"","text \"Making no changes:  this is a dry run.\"");
idea("Error: Redundant $","Darcs/Arguments.lhs",1034,1,"putDocLn $ put_mode","putDocLn put_mode");
idea("Warning: Redundant brackets","Darcs/Arguments.lhs",1044,12,"if XMLOutput `elem` opts then\n  (text \"<patches>\" $$ vcat (mapFL (to_xml . info) patches) $$\n     text \"</patches>\")\n  else (vsep $ mapFL (showFriendly opts) patches)","if XMLOutput `elem` opts then\n  text \"<patches>\" $$ vcat (mapFL (to_xml . info) patches) $$\n    text \"</patches>\"\n  else vsep $ mapFL (showFriendly opts) patches");
idea("Warning: Use string literal","Darcs/Arguments.lhs",1088,1,"['i']","\"i\"");
idea("Warning: Use string literal","Darcs/Arguments.lhs",1091,1,"['a']","\"a\"");
idea("Warning: Redundant brackets","Darcs/Arguments.lhs",1122,49,"(skip_boring $ list_slurpy s) \\\\ (list_slurpy regs)","(skip_boring $ list_slurpy s) \\\\ list_slurpy regs");
idea("Warning: Redundant brackets","Darcs/Arguments.lhs",1129,1,"(map drop_dotslash . list_slurpy) `fmap`\n  (withRepository [] slurp_pending)","(map drop_dotslash . list_slurpy) `fmap`\n  withRepository [] slurp_pending");
idea("Warning: Use :","Darcs/Arguments.lhs",1146,1,"(\" \" ++ arg)","' ' : arg");
idea("Warning: Use :","Darcs/Arguments.lhs",1149,1,"(\" \" ++ arg)","' ' : arg");
idea("Warning: Use :","Darcs/Arguments.lhs",1152,1,"(\" \" ++ arg)","' ' : arg");
idea("Warning: Redundant brackets","Darcs/Arguments.lhs",1193,1,"s : (flagsToSiblings l)","s : flagsToSiblings l");
idea("Warning: Use string literal","Darcs/Arguments.lhs",1242,1,"['0']","\"0\"");
idea("Warning: Eta reduce","Darcs/Bug.lhs",17,1,"_bug fetchUrl bs s = _bugDoc fetchUrl bs (text s)","_bug fetchUrl bs = _bugDoc fetchUrl bs . text");
idea("Error: Redundant do","Darcs/CheckFileSystem.lhs",44,13,"do withOpenTemp $\n     \\ (_, f) ->\n       (do removeFile f\n           setCurrentDirectory \"..\"\n           removeDirectory \"darcs_testing_for_nfs\"\n           return True)\n         `catch` \\ _ -> return False","withOpenTemp $\n  \\ (_, f) ->\n    (do removeFile f\n        setCurrentDirectory \"..\"\n        removeDirectory \"darcs_testing_for_nfs\"\n        return True)\n      `catch` \\ _ -> return False");
idea("Warning: Eta reduce","Darcs/ColorPrinter.lhs",28,1,"traceDoc d = trace (show d)","traceDoc = trace . show");
idea("Warning: Use liftM","Darcs/ColorPrinter.lhs",95,3,"safeGetEnv s >>= return . (/= \"0\")","liftM (/= \"0\") (safeGetEnv s)");
idea("Warning: Redundant brackets","Darcs/ColorPrinter.lhs",199,1,"if (poIsprint po) then isPrint c else\n  isPrintableAscii c || c >= '\\128' && po8bit po","if poIsprint po then isPrint c else\n  isPrintableAscii c || c >= '\\128' && po8bit po");
idea("Warning: Use const","Darcs/ColorPrinter.lhs",236,29,"\\ _ -> make_bold","const make_bold");
idea("Warning: Eta reduce","Darcs/Commands.lhs",123,1,"extract_commands cs\n  = concatMap\n      (\\ x ->\n         case x of\n             Command_data cmd_d -> [cmd_d]\n             _ -> [])\n      cs","extract_commands\n  = concatMap\n      (\\ x ->\n         case x of\n             Command_data cmd_d -> [cmd_d]\n             _ -> [])");
idea("Warning: Eta reduce","Darcs/Commands.lhs",124,1,"extract_hidden_commands cs\n  = concatMap\n      (\\ x ->\n         case x of\n             Hidden_command cmd_d -> [cmd_d]\n             _ -> [])\n      cs","extract_hidden_commands\n  = concatMap\n      (\\ x ->\n         case x of\n             Hidden_command cmd_d -> [cmd_d]\n             _ -> [])");
idea("Warning: Eta reduce","Darcs/Commands.lhs",176,1,"nodefaults _ _ xs = return xs","nodefaults _ _ = return");
idea("Warning: Redundant brackets","Darcs/Commands.lhs",250,1,"(usageInfo\n   (\"Usage: darcs \" ++\n      command_name super ++\n        \" SUBCOMMAND ... \" ++\n          \"\\n\\n\" ++\n            command_description super ++\n              \"\\n\\nSubcommands:\\n\" ++\n                usage_helper (get_subcommands super) ++ \"\\nOptions:\")\n   (option_from_darcsoption rootDirectory help))\n  ++ \"\\n\" ++ command_help super","usageInfo\n  (\"Usage: darcs \" ++\n     command_name super ++\n       \" SUBCOMMAND ... \" ++\n         \"\\n\\n\" ++\n           command_description super ++\n             \"\\n\\nSubcommands:\\n\" ++\n               usage_helper (get_subcommands super) ++ \"\\nOptions:\")\n  (option_from_darcsoption rootDirectory help)\n  ++ \"\\n\" ++ command_help super");
idea("Error: Redundant do","Darcs/Commands.lhs",299,5,"do fail $ chomp_newline (unlines ermsgs)","fail $ chomp_newline (unlines ermsgs)");
idea("Warning: Redundant brackets","Darcs/Commands.lhs",314,11,"(command_argdefaults cmd) specops","command_argdefaults cmd specops");
idea("Warning: Redundant brackets","Darcs/Commands.lhs",331,14,"(command_command cmd) (fixFlag : os)","command_command cmd (fixFlag : os)");
idea("Warning: Eta reduce","Darcs/Commands.lhs",390,8,"isin f fs = any (`isa` f) fs","isin f = any (`isa` f)");
idea("Warning: Redundant brackets","Darcs/Commands.lhs",420,1,"(maybe \"\" (\\ c -> command_name c ++ \" \") msuper) ++\n  command_name cmd ++ \" for details.\"","maybe \"\" (\\ c -> command_name c ++ \" \") msuper ++\n  command_name cmd ++ \" for details.\"");
idea("Warning: Redundant brackets","Darcs/Commands.lhs",444,24,"\"\\n\\nSubcommands:\\n\" ++ (usage_helper s)","\"\\n\\nSubcommands:\\n\" ++ usage_helper s");
idea("Warning: Redundant brackets","Darcs/Commands.lhs",475,7,"(command_name super) ++ \" disabled with --disable option!\"","command_name super ++ \" disabled with --disable option!\"");
idea("Error: Redundant do","Darcs/Commands.lhs",480,5,"do fail $ chomp_newline (unlines ermsgs)","fail $ chomp_newline (unlines ermsgs)");
idea("Error: Use when","Darcs/CommandsAux.lhs",53,1,"if check_is_on && or (mapFL has_malicious_path patches) then\n  fail \"Malicious path\" else return ()","when (check_is_on && or (mapFL has_malicious_path patches)) $\n  fail \"Malicious path\"");
idea("Warning: Eta reduce","Darcs/CommandsAux.lhs",65,1,"malicious_patches to_check\n  = filter (unseal2 has_malicious_path) to_check","malicious_patches = filter (unseal2 has_malicious_path)");
idea("Warning: Eta reduce","Darcs/CommandsAux.lhs",100,5,"contains_any a b = not . null $ intersect a b","contains_any a = not . null . intersect a");
idea("Warning: Redundant brackets","Darcs/Compat.hs",50,11,"fp ++ (showHexLen 6 (r .&. 16777215 :: Int))","fp ++ showHexLen 6 (r .&. 16777215 :: Int)");
idea("Warning: Use >>=","Darcs/Compat.hs",105,1,"do fd <- openFd fp WriteOnly (Just stdFileMode) flags\n   closeFd fd","openFd fp WriteOnly (Just stdFileMode) flags >>= closeFd");
idea("Warning: Eta reduce","Darcs/Diff.lhs",103,1,"mk_filepath fps = concat $ intersperse \"/\" $ reverse fps","mk_filepath = concat . intersperse \"/\" . reverse");
idea("Warning: Redundant brackets","Darcs/Diff.lhs",165,19,"if summary then id else (bin_patch f nilPS (get_filecontents s))","if summary then id else bin_patch f nilPS (get_filecontents s)");
idea("Warning: Redundant brackets","Darcs/Diff.lhs",232,19,"(bin_patch f (get_filecontents s) nilPS) . (rmfile f :>:)","bin_patch f (get_filecontents s) nilPS . (rmfile f :>:)");
idea("Error: Use unless","Darcs/Diff.lhs",292,1,"when (not b) $\n  putStrLn $ \"files \" ++ f1 ++ \" and \" ++ f2 ++ \" differ\"","unless b (putStrLn $ \"files \" ++ f1 ++ \" and \" ++ f2 ++ \" differ\")");
idea("Error: Use isPrefixOf","Darcs/FilePathUtils.hs",38,1,"(take 1 $ reverse dir) == \"/\"","\"/\" `isPrefixOf` reverse dir");
idea("Warning: Use >>=","Darcs/FilePathUtils.hs",38,1,"do realdir <- withCurrentDirectory dir getCurrentDirectory\n   return realdir","withCurrentDirectory dir getCurrentDirectory >>= return");
idea("Error: Redundant return","Darcs/FilePathUtils.hs",38,1,"do realdir <- withCurrentDirectory dir getCurrentDirectory\n   return realdir","do withCurrentDirectory dir getCurrentDirectory");
idea("Warning: Eta reduce","Darcs/FilePathUtils.hs",66,1,"just_dir d = reverse $ takeWhile (/= '/') $ reverse d","just_dir = reverse . takeWhile (/= '/') . reverse");
idea("Warning: Eta reduce","Darcs/FilePathUtils.hs",73,1,"do_norm f = fn2fp $ norm_path $ fp2fn f","do_norm = fn2fp . norm_path . fp2fn");
idea("Error: Redundant do","Darcs/Global.lhs",48,1,"do modifyMVar_ atexit_actions $\n     \\ ml ->\n       do case ml of\n              Just l -> do return (Just (action : l))\n              Nothing -> do hPutStrLn stderr \"It's too late to use atexit\"\n                            return Nothing","modifyMVar_ atexit_actions $\n  \\ ml ->\n    do case ml of\n           Just l -> do return (Just (action : l))\n           Nothing -> do hPutStrLn stderr \"It's too late to use atexit\"\n                         return Nothing");
idea("Error: Redundant do","Darcs/Global.lhs",49,35,"do case ml of\n       Just l -> do return (Just (action : l))\n       Nothing -> do hPutStrLn stderr \"It's too late to use atexit\"\n                     return Nothing","case ml of\n    Just l -> do return (Just (action : l))\n    Nothing -> do hPutStrLn stderr \"It's too late to use atexit\"\n                  return Nothing");
idea("Error: Redundant do","Darcs/Global.lhs",51,13,"do return (Just (action : l))","return (Just (action : l))");
idea("Error: Redundant do","Darcs/Global.lhs",58,1,"do bracket_ (return ()) exit prog","bracket_ (return ()) exit prog");
idea("Error: Redundant do","Darcs/Global.lhs",68,5,"do catch (unblock action) $\n     \\ exn ->\n       do hPutStrLn stderr $\n            \"Exception thrown by an atexit registered action:\"\n          hPutStrLn stderr $ show exn","catch (unblock action) $\n  \\ exn ->\n    do hPutStrLn stderr $\n         \"Exception thrown by an atexit registered action:\"\n       hPutStrLn stderr $ show exn");
idea("Error: Redundant $","Darcs/Global.lhs",69,35,"hPutStrLn stderr $\n  \"Exception thrown by an atexit registered action:\"","hPutStrLn stderr \"Exception thrown by an atexit registered action:\"");
idea("Warning: Eta reduce","Darcs/IO.lhs",75,5,"mReadBinFile f = liftM unpackPS $ mReadFilePS f","mReadBinFile = liftM unpackPS . mReadFilePS");
idea("Warning: Eta reduce","Darcs/IO.lhs",84,5,"mWriteBinFile fn s = mWriteFilePS fn $ packString s","mWriteBinFile fn = mWriteFilePS fn . packString");
idea("Warning: Eta reduce","Darcs/IO.lhs",87,5,"mWriteFilePSs f ss = mWriteFilePS f (unlinesPS ss)","mWriteFilePSs f = mWriteFilePS f . unlinesPS");
idea("Warning: Eta reduce","Darcs/IO.lhs",91,5,"mWriteDoc f d = mWriteFilePS f (renderPS d)","mWriteDoc f = mWriteFilePS f . renderPS");
idea("Error: Use unless","Darcs/IO.lhs",124,5,"when (not $ nullPS x) $\n  fail $ \"Cannot remove non-empty file \" ++ fp","unless (nullPS x) (fail $ \"Cannot remove non-empty file \" ++ fp)");
idea("Warning: Eta reduce","Darcs/IO.lhs",150,5,"runTM io = TIO io","runTM = TIO");
idea("Warning: Eta reduce","Darcs/IO.lhs",156,5,"runTM io = SIO io","runTM = SIO");
idea("Warning: Eta reduce","Darcs/IO.lhs",170,5,"fail s = runTM $ fail s","fail = runTM . fail");
idea("Warning: Eta reduce","Darcs/IO.lhs",171,5,"return x = runTM $ return x","return = runTM . return");
idea("Warning: Eta reduce","Darcs/IO.lhs",175,5,"fail s = runTM $ fail s","fail = runTM . fail");
idea("Warning: Eta reduce","Darcs/IO.lhs",176,5,"return x = runTM $ return x","return = runTM . return");
idea("Warning: Eta reduce","Darcs/IO.lhs",186,5,"mDoesDirectoryExist d = runTM $ mDoesDirectoryExist d","mDoesDirectoryExist = runTM . mDoesDirectoryExist");
idea("Warning: Eta reduce","Darcs/IO.lhs",187,5,"mDoesFileExist f = runTM $ mDoesFileExist f","mDoesFileExist = runTM . mDoesFileExist");
idea("Warning: Eta reduce","Darcs/IO.lhs",188,5,"mInCurrentDirectory i j = runTM $ mInCurrentDirectory i (runIO j)","mInCurrentDirectory i = runTM . mInCurrentDirectory i . runIO");
idea("Warning: Eta reduce","Darcs/IO.lhs",190,5,"mReadBinFile f = runTM $ mReadBinFile f","mReadBinFile = runTM . mReadBinFile");
idea("Warning: Eta reduce","Darcs/IO.lhs",191,5,"mReadFilePS f = runTM $ mReadFilePS f","mReadFilePS = runTM . mReadFilePS");
idea("Warning: Eta reduce","Darcs/IO.lhs",193,5,"mDoesDirectoryExist d = runTM $ mDoesDirectoryExist d","mDoesDirectoryExist = runTM . mDoesDirectoryExist");
idea("Warning: Eta reduce","Darcs/IO.lhs",194,5,"mDoesFileExist f = runTM $ mDoesFileExist f","mDoesFileExist = runTM . mDoesFileExist");
idea("Warning: Eta reduce","Darcs/IO.lhs",195,5,"mInCurrentDirectory i j = runTM $ mInCurrentDirectory i (runIO j)","mInCurrentDirectory i = runTM . mInCurrentDirectory i . runIO");
idea("Warning: Eta reduce","Darcs/IO.lhs",197,5,"mReadBinFile f = runTM $ mReadBinFile f","mReadBinFile = runTM . mReadBinFile");
idea("Warning: Eta reduce","Darcs/IO.lhs",198,5,"mReadFilePS f = runTM $ mReadFilePS f","mReadFilePS = runTM . mReadFilePS");
idea("Warning: Eta reduce","Darcs/IO.lhs",202,6,"mSetFileExecutable f e = warning $ mSetFileExecutable f e","mSetFileExecutable f = warning . mSetFileExecutable f");
idea("Warning: Eta reduce","Darcs/IO.lhs",203,6,"mWriteBinFile f s = warning $ mWriteBinFile f s","mWriteBinFile f = warning . mWriteBinFile f");
idea("Warning: Eta reduce","Darcs/IO.lhs",204,6,"mWriteFilePS f s = warning $ mWriteFilePS f s","mWriteFilePS f = warning . mWriteFilePS f");
idea("Warning: Eta reduce","Darcs/IO.lhs",207,6,"mRemoveFile f = warning $ mRemoveFile f","mRemoveFile = warning . mRemoveFile");
idea("Warning: Redundant brackets","Darcs/IO.lhs",217,32,"if (map toLower x == map toLower y) then backupByCopying y else\n  backupByRenaming y","if map toLower x == map toLower y then backupByCopying y else\n  backupByRenaming y");
idea("Warning: Eta reduce","Darcs/IO.lhs",234,6,"mSetFileExecutable f e = warning $ mSetFileExecutable f e","mSetFileExecutable f = warning . mSetFileExecutable f");
idea("Warning: Eta reduce","Darcs/IO.lhs",235,6,"mWriteBinFile f s = warning $ mWriteBinFile f s","mWriteBinFile f = warning . mWriteBinFile f");
idea("Warning: Eta reduce","Darcs/IO.lhs",236,6,"mWriteFilePS f s = warning $ mWriteFilePS f s","mWriteFilePS f = warning . mWriteFilePS f");
idea("Warning: Eta reduce","Darcs/IO.lhs",239,6,"mRemoveFile f = warning $ mRemoveFile f","mRemoveFile = warning . mRemoveFile");
idea("Warning: Redundant brackets","Darcs/IO.lhs",249,32,"if (map toLower x == map toLower y) then backupByCopying y else\n  backupByRenaming y","if map toLower x == map toLower y then backupByCopying y else\n  backupByRenaming y");
idea("Warning: Eta reduce","Darcs/IO.lhs",266,1,"backup f = backupByRenaming $ fn2fp f","backup = backupByRenaming . fn2fp");
idea("Warning: Use const","Darcs/Lock.lhs",75,55,"\\ _ -> job","const job");
idea("Error: Use when","Darcs/Lock.lhs",82,13,"if l then releaseLock s else return ()","when l $ releaseLock s");
idea("Warning: Use liftM","Darcs/Lock.lhs",83,13,"job >>= (return . Right)","liftM Right job");
idea("Warning: Eta reduce","Darcs/Lock.lhs",108,1,"releaseLock s = removeFileMayNotExist s","releaseLock = removeFileMayNotExist");
idea("Warning: Use liftM","Darcs/Lock.lhs",182,1,"firstJustIO\n  [readBinFile (darcsdir ++ \"/prefs/tmpdir\") >>=\n     return . Just . head . words\n     >>= chkdir,\n   maybeGetEnv \"DARCS_TMPDIR\" >>= chkdir,\n   getTemporaryDirectory >>= chkdir . Just,\n   getCurrentDirectorySansDarcs, return $ Just \".\"]\n  >>= return . fromJust","liftM fromJust\n  (firstJustIO\n     [readBinFile (darcsdir ++ \"/prefs/tmpdir\") >>=\n        return . Just . head . words\n        >>= chkdir,\n      maybeGetEnv \"DARCS_TMPDIR\" >>= chkdir,\n      getTemporaryDirectory >>= chkdir . Just,\n      getCurrentDirectorySansDarcs, return $ Just \".\"])");
idea("Warning: Use liftM","Darcs/Lock.lhs",182,1,"readBinFile (darcsdir ++ \"/prefs/tmpdir\") >>=\n  return . Just . head . words","liftM (Just . head . words)\n  (readBinFile (darcsdir ++ \"/prefs/tmpdir\"))");
idea("Warning: Use liftM","Darcs/Lock.lhs",190,11,"doesDirectoryExist d >>=\n  return . \\ e -> if e then Just (d ++ \"/\") else Nothing","liftM (\\ e -> if e then Just (d ++ \"/\") else Nothing)\n  (doesDirectoryExist d)");
idea("Error: Use mapM_","Darcs/Lock.lhs",245,1,"sequence_ $ map rm_recursive conts","mapM_ rm_recursive conts");
idea("Error: Redundant $","Darcs/Lock.lhs",245,1,"withCurrentDirectory d $ (sequence_ $ map rm_recursive conts)","withCurrentDirectory d (sequence_ $ map rm_recursive conts)");
idea("Warning: Eta reduce","Darcs/Lock.lhs",307,1,"gzWriteDocFile f d = gzWriteAtomicFilePSs f $ renderPSs d","gzWriteDocFile f = gzWriteAtomicFilePSs f . renderPSs");
idea("Error: Redundant do","Darcs/Match.lhs",167,1,"do case get_match_pattern opts of\n       Nothing -> return ()\n       Just p -> either fail (const $ return ()) $\n                   (parseMatch p :: Either String (MatchFun Patch))","case get_match_pattern opts of\n    Nothing -> return ()\n    Just p -> either fail (const $ return ()) $\n                (parseMatch p :: Either String (MatchFun Patch))");
idea("Error: Redundant $","Darcs/Match.lhs",170,3,"either fail (const $ return ()) $\n  (parseMatch p :: Either String (MatchFun Patch))","either fail (const $ return ())\n  (parseMatch p :: Either String (MatchFun Patch))");
idea("Error: Use isPrefixOf","Darcs/Match.lhs",182,11,"take 4 n == \"TAG \"","\"TAG \" `isPrefixOf` n");
idea("Warning: Use const","Darcs/Match.lhs",243,17,"\\ _ -> True","const True");
idea("Warning: Redundant brackets","Darcs/Match.lhs",260,17,"(unseal myhead) $ dropn (a - 1) ps","unseal myhead $ dropn (a - 1) ps");
idea("Error: Redundant $","Darcs/Match.lhs",351,32,"apply_matcher m $ p","apply_matcher m p");
idea("Warning: Use >>=","Darcs/Match.lhs",403,1,"do fcs <- get_file_contents r files gf\n   writeFiles fcs","get_file_contents r files gf >>= writeFiles");
idea("Warning: Redundant brackets","Darcs/Match.lhs",407,9,"(ensureDirectories $ super_name p) >> (mWriteFilePS p c)","(ensureDirectories $ super_name p) >> mWriteFilePS p c");
idea("Warning: Redundant brackets","Darcs/Match.lhs",408,9,"ensureDirectories (super_name d) >> (mCreateDirectory d)","ensureDirectories (super_name d) >> mCreateDirectory d");
idea("Warning: Redundant brackets","Darcs/Match.lhs",425,9,"patch2patchinfo `unseal2` (find_a_patch match repo)","patch2patchinfo `unseal2` find_a_patch match repo");
idea("Error: Redundant $","Darcs/Match.lhs",427,9,"applyInvRL $ extras","applyInvRL extras");
idea("Warning: Redundant brackets","Darcs/Match.lhs",444,1,"(apply_patches [] . invertRL) `unsealFlipped`\n  (safetake n (concatRL ps))","(apply_patches [] . invertRL) `unsealFlipped`\n  safetake n (concatRL ps)");
idea("Warning: Redundant brackets","Darcs/Match.lhs",459,9,"patch2patchinfo `unseal2` (find_a_patch match ps)","patch2patchinfo `unseal2` find_a_patch match ps");
idea("Warning: Eta reduce","Darcs/Population.lhs",78,1,"applyPatchSetPop ps pop\n  = applyPatchesPop (reverseRL $ concatRL ps) pop","applyPatchSetPop = applyPatchesPop . reverseRL . concatRL");
idea("Warning: Redundant brackets","Darcs/Population.lhs",106,82,"(unseal applyPatchSetPop)\n  (mkPatchSet $ dropWhileRL ((/= pinfo) . info) pips)","unseal applyPatchSetPop\n  (mkPatchSet $ dropWhileRL ((/= pinfo) . info) pips)");
idea("Warning: Eta reduce","Darcs/Population.lhs",122,1,"lookup_pop f p = lookup_pop' (unpackPS $ fn2ps $ fp2fn f) p","lookup_pop = lookup_pop' . unpackPS . fn2ps . fp2fn");
idea("Warning: Redundant brackets","Darcs/Population.lhs",129,5,"lookup_pop' (dropDS d) . (Pop pinfo)","lookup_pop' (dropDS d) . Pop pinfo");
idea("Warning: Redundant brackets","Darcs/Population.lhs",137,9,"lookup_pop' d' . (Pop pinfo)","lookup_pop' d' . Pop pinfo");
idea("Warning: Eta reduce","Darcs/Population.lhs",146,1,"lookup_creation_pop pinfo f p\n  = lookup_creation_pop' pinfo (unpackPS $ fn2ps $ fp2fn f) p","lookup_creation_pop pinfo\n  = lookup_creation_pop' pinfo . unpackPS . fn2ps . fp2fn");
idea("Warning: Redundant brackets","Darcs/Population.lhs",149,1,"(Pop pinfo) `fmap` lcp pp","Pop pinfo `fmap` lcp pp");
idea("Warning: Eta reduce","Darcs/PopulationData.lhs",82,2,"show s = showPop \"\" s","show = showPop \"\"");
idea("Error: Use mapM","Darcs/PopulationData.lhs",127,15,"sequence $ map getPopFrom_helper $ filter not_hidden fnames","mapM getPopFrom_helper (filter not_hidden fnames)");
idea("Warning: Eta reduce","Darcs/PrintPatch.lhs",40,1,"printFriendly opts p\n  = putDocLnWith fancyPrinters $ showFriendly opts p","printFriendly opts = putDocLnWith fancyPrinters . showFriendly opts");
idea("Warning: Eta reduce","Darcs/PrintPatch.lhs",44,1,"printPatch p = putDocLnWith fancyPrinters $ showPatch p","printPatch = putDocLnWith fancyPrinters . showPatch");
idea("Warning: Eta reduce","Darcs/PrintPatch.lhs",48,1,"printPatchPager p = viewDocWith fancyPrinters $ showPatch p","printPatchPager = viewDocWith fancyPrinters . showPatch");
idea("Warning: Eta reduce","Darcs/PrintPatch.lhs",53,1,"contextualPrintPatch s p\n  = putDocLnWith fancyPrinters $ showContextPatch s p","contextualPrintPatch s\n  = putDocLnWith fancyPrinters . showContextPatch s");
idea("Error: Redundant $","Darcs/Progress.lhs",70,1,"setProgressData k $\n  ProgressData{sofar = 0, latest = Nothing, total = Nothing}","setProgressData k\n  ProgressData{sofar = 0, latest = Nothing, total = Nothing}");
idea("Warning: Use second","Darcs/Progress.lhs",76,1,"\\ (a, m) -> (a, delete k m)","second (delete k)");
idea("Error: Use when","Darcs/Progress.lhs",89,30,"if total p == Just l then endTedious k else return ()","when (total p == Just l) $ endTedious k");
idea("Warning: Redundant brackets","Darcs/Progress.lhs",121,11,"(startit y) :>: NilFL","startit y :>: NilFL");
idea("Warning: Redundant brackets","Darcs/Progress.lhs",133,11,"(startit y) :<: NilRL","startit y :<: NilRL");
idea("Error: Use replicate","Darcs/Progress.lhs",176,40,"take (length s) (repeat ' ')","replicate (length s) ' '");
idea("Error: Use unless","Darcs/Progress.lhs",179,28,"when (not $ null s) $\n  do hPutStrLn fe s\n     hFlush fe","unless (null s)\n  (do hPutStrLn fe s\n      hFlush fe)");
idea("Warning: Eta reduce","Darcs/Progress.lhs",183,1,"setProgressMode m = writeIORef _progressMode m","setProgressMode = writeIORef _progressMode");
idea("Warning: Use second","Darcs/Progress.lhs",198,1,"\\ (a, m) -> (a, insert k p m)","second (insert k p)");
idea("Warning: Eta reduce","Darcs/RemoteApply.lhs",35,1,"apply_via_sudo user repo bundle\n  = pipeDoc \"sudo\"\n      [\"-u\", user, \"darcs\", \"apply\", \"--all\", \"--repodir\", repo]\n      bundle","apply_via_sudo user repo\n  = pipeDoc \"sudo\"\n      [\"-u\", user, \"darcs\", \"apply\", \"--all\", \"--repodir\", repo]");
idea("Warning: Eta reduce","Darcs/RemoteApply.lhs",38,1,"apply_via_local opts repo bundle\n  = pipeDoc \"darcs\"\n      (\"apply\" : \"--all\" : \"--repodir\" : repo : applyopts opts)\n      bundle","apply_via_local opts repo\n  = pipeDoc \"darcs\"\n      (\"apply\" : \"--all\" : \"--repodir\" : repo : applyopts opts)");
idea("Warning: Use list comprehension","Darcs/RemoteApply.lhs",62,1,"if Debug `elem` opts then [\"--debug\"] else []","[\"--debug\" | Debug `elem` opts]");
idea("Warning: Eta reduce","Darcs/RepoPath.hs",68,2,"fromFilePath xs = AbsolutePath xs","fromFilePath = AbsolutePath");
idea("Warning: Eta reduce","Darcs/RepoPath.hs",142,1,"simpleClean x\n  = norm_slashes $\n      reverse $ dropWhile (== '/') $ reverse $ map cleanup x","simpleClean\n  = norm_slashes .\n      reverse . dropWhile (== '/') . reverse . map cleanup");
idea("Warning: Eta reduce","Darcs/Resolution.lhs",60,1,"standard_resolution p = merge_list $ map head $ resolve_conflicts p","standard_resolution = merge_list . map head . resolve_conflicts");
idea("Error: Redundant $","Darcs/SignalHandler.lhs",64,22,"ExitFailure $ 1","ExitFailure 1");
idea("Error: Redundant $","Darcs/SignalHandler.lhs",66,11,"hPutStrLn stderr $ (\"withSignalsHandled: \" ++ s)","hPutStrLn stderr (\"withSignalsHandled: \" ++ s)");
idea("Error: Redundant $","Darcs/SignalHandler.lhs",66,11,"ExitFailure $ 1","ExitFailure 1");
idea("Error: Use isPrefixOf","Darcs/SignalHandler.lhs",70,29,"take 6 e == \"STDOUT\"","\"STDOUT\" `isPrefixOf` e");
idea("Error: Use unless","Darcs/SignalHandler.lhs",70,29,"when (not is_pipe) $\n  hPutStrLn stderr $ \"\\ndarcs failed:  \" ++ drop 6 e","unless is_pipe (hPutStrLn stderr $ \"\\ndarcs failed:  \" ++ drop 6 e)");
idea("Error: Redundant $","Darcs/SignalHandler.lhs",70,29,"ExitFailure $ 2","ExitFailure 2");
idea("Error: Redundant $","Darcs/SignalHandler.lhs",75,11,"ExitFailure $ 2","ExitFailure 2");
idea("Warning: Redundant brackets","Darcs/SignalHandler.lhs",127,1,"(block job) `catchSignal` couldnt_do","block job `catchSignal` couldnt_do");
idea("Error: Use concatMap","Darcs/SlurpDirectory.lhs",89,5,"concat (map show l)","concatMap show l");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",89,5,"(fn2fp fn) ++\n  \"\\n\" ++ concat (map show l) ++ \"End Dir \" ++ (fn2fp fn) ++ \"\\n\"","fn2fp fn ++\n  \"\\n\" ++ concat (map show l) ++ \"End Dir \" ++ (fn2fp fn) ++ \"\\n\"");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",89,5,"(fn2fp fn) ++ \"\\n\"","fn2fp fn ++ \"\\n\"");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",92,5,"(fn2fp fn) ++ \"\\n\"","fn2fp fn ++ \"\\n\"");
idea("Warning: Use on","Darcs/SlurpDirectory.lhs",109,5,"s1 == s2 = (slurp_name s1) == (slurp_name s2)","(==) = (==) `on` slurp_name");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",109,5,"(slurp_name s1) == (slurp_name s2)","slurp_name s1 == slurp_name s2");
idea("Warning: Use on","Darcs/SlurpDirectory.lhs",111,5,"s1 <= s2 = (slurp_name s1) <= (slurp_name s2)","(<=) = (<=) `on` slurp_name");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",111,5,"(slurp_name s1) <= (slurp_name s2)","slurp_name s1 <= slurp_name s2");
idea("Warning: Eta reduce","Darcs/SlurpDirectory.lhs",142,5,"mDoesDirectoryExist d = smDoesDirectoryExist d","mDoesDirectoryExist = smDoesDirectoryExist");
idea("Warning: Eta reduce","Darcs/SlurpDirectory.lhs",143,5,"mDoesFileExist f = smDoesFileExist f","mDoesFileExist = smDoesFileExist");
idea("Error: Use when","Darcs/SlurpDirectory.lhs",170,1,"if slurp_hasdir fn s then ensureDirectories fn else return ()","when (slurp_hasdir fn s) $ ensureDirectories fn");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",178,1,"ensureDirectories (super_name d) >> (mCreateDirectory d)","ensureDirectories (super_name d) >> mCreateDirectory d");
idea("Warning: Eta reduce","Darcs/SlurpDirectory.lhs",185,1,"write_files s fps = mapM_ (try_write_file s) fps","write_files = mapM_ . try_write_file");
idea("Warning: Use const","Darcs/SlurpDirectory.lhs",251,43,"\\ _ -> sl","const sl");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",265,18,"if (slurp_has (fn2fp a) s) then\n  Left $ \"Error moving \" ++ fn2fp a ++ \" to \" ++ fn2fp b else\n  Right (s, ())","if slurp_has (fn2fp a) s then\n  Left $ \"Error moving \" ++ fn2fp a ++ \" to \" ++ fn2fp b else\n  Right (s, ())");
idea("Warning: Use const","Darcs/SlurpDirectory.lhs",349,26,"\\ _ -> True","const True");
idea("Warning: Use const","Darcs/SlurpDirectory.lhs",351,51,"\\ _ -> True","const True");
idea("Warning: Use const","Darcs/SlurpDirectory.lhs",352,52,"\\ _ -> True","const True");
idea("Warning: Eta reduce","Darcs/SlurpDirectory.lhs",547,1,"get_slurp f s = fmap snd (get_slurp_context f s)","get_slurp f = fmap snd . get_slurp_context f");
idea("Warning: Eta reduce","Darcs/SlurpDirectory.lhs",592,1,"slurp_has f s = isJust (get_slurp (fp2fn f) s)","slurp_has f = isJust . get_slurp (fp2fn f)");
idea("Error: Use any","Darcs/SlurpDirectory.lhs",595,1,"or $ map (hasany_private normed_name) contents","any (hasany_private normed_name) contents");
idea("Error: Redundant if","Darcs/SlurpDirectory.lhs",603,17,"if tolower dn == tolower d then or $ map (hasany_private fn) c else\n  False","(tolower dn == tolower d) && (or $ map (hasany_private fn) c)");
idea("Error: Use any","Darcs/SlurpDirectory.lhs",603,17,"or $ map (hasany_private fn) c","any (hasany_private fn) c");
idea("Warning: Redundant brackets","Darcs/SlurpDirectory.lhs",610,1,"(map toLower) . fn2fp","map toLower . fn2fp");
idea("Error: Use any","Darcs/SlurpDirectory.lhs",614,1,"or $ map (slurp_hasdir_private $ norm_path f) c","any (slurp_hasdir_private $ norm_path f) c");
idea("Error: Redundant if","Darcs/SlurpDirectory.lhs",624,8,"if dn == d then or $ map (slurp_hasdir_private fn) c else False","(dn == d) && (or $ map (slurp_hasdir_private fn) c)");
idea("Error: Use any","Darcs/SlurpDirectory.lhs",624,8,"or $ map (slurp_hasdir_private fn) c","any (slurp_hasdir_private fn) c");
idea("Warning: Use >>=","Darcs/Test.lhs",63,1,"do test <- get_test opts\n   withCurrentDirectory testdir test","get_test opts >>= withCurrentDirectory testdir");
idea("Error: Use unless","Darcs/Test.lhs",68,6,"when (not $ Quiet `elem` opts) $ putStr s","unless (Quiet `elem` opts) (putStr s)");
idea("Warning: Eta reduce","Darcs/Test.lhs",68,6,"putInfo s = when (not $ Quiet `elem` opts) $ putStr s","putInfo = when (not $ Quiet `elem` opts) . putStr");
idea("Warning: Eta reduce","Darcs/Test.lhs",91,6,"putInfo s = when (Verbose `elem` opts) $ putStr s","putInfo = when (Verbose `elem` opts) . putStr");
idea("Warning: Eta reduce","Darcs/Test.lhs",92,6,"putErr s = when (Quiet `notElem` opts) $ hPutStr stderr s","putErr = when (Quiet `notElem` opts) . hPutStr stderr");
idea("Warning: Eta reduce","Darcs/Test.lhs",119,6,"putInfo s = when (Verbose `elem` opts) $ putStr s","putInfo = when (Verbose `elem` opts) . putStr");
idea("Warning: Eta reduce","Darcs/Test.lhs",120,6,"putErr s = when (Quiet `notElem` opts) $ hPutStr stderr s","putErr = when (Quiet `notElem` opts) . hPutStr stderr");
idea("Warning: Use const","Darcs/Utils.lhs",81,39,"\\ _ -> b","const b");
idea("Warning: Use liftM","Darcs/Utils.lhs",84,1,"getEnv s >>= return . Just","liftM Just (getEnv s)");
idea("Warning: Eta reduce","Darcs/Utils.lhs",123,1,"withCurrentDirectory name m\n  = bracket\n      (do cwd <- getCurrentDirectory\n          when (toFilePath name /= \"\") (setCurrentDirectory name)\n          return cwd)\n      (\\ oldwd -> setCurrentDirectory oldwd `catchall` return ())\n      (const m)","withCurrentDirectory name\n  = bracket\n      (do cwd <- getCurrentDirectory\n          when (toFilePath name /= \"\") (setCurrentDirectory name)\n          return cwd)\n      (\\ oldwd -> setCurrentDirectory oldwd `catchall` return ())\n      . const");
idea("Error: Redundant do","Darcs/Utils.lhs",265,1,"do bracket nobuf rebuf $ \\ _ -> job","bracket nobuf rebuf $ \\ _ -> job");
idea("Warning: Use const","Darcs/Utils.lhs",266,28,"\\ _ -> job","const job");
idea("Error: Use mapM_","Darcs/Commands/Add.lhs",107,43,"sequence_ $\n  map (putInfoLn . ((msg_skipping msgs ++ \" boring file \") ++)) $\n    flist \\\\ nboring flist","mapM_ (putInfoLn . ((msg_skipping msgs ++ \" boring file \") ++))\n  (flist \\\\ nboring flist)");
idea("Error: Use unless","Darcs/Commands/Add.lhs",107,43,"when (not gotDryRun) $ add_to_pending repository ps","unless gotDryRun (add_to_pending repository ps)");
idea("Error: Redundant do","Darcs/Commands/Add.lhs",107,43,"do fail \"No files were added\"","fail \"No files were added\"");
idea("Error: Redundant $","Darcs/Commands/Add.lhs",116,13,"return $ darcsdir_filter","return darcsdir_filter");
idea("Error: Use unless","Darcs/Commands/Add.lhs",133,1,"when (not (null dups)) $\n  do dupMsg <- case uniq_dups of\n                   [f] -> do isDir <- doesDirectoryReallyExist f\n                             if isDir then\n                               return $\n                                 \"The following directory \" ++\n                                   msg_is msgs ++ \" already in the repository\"\n                               else\n                               return $\n                                 \"The following file \" ++\n                                   msg_is msgs ++ \" already in the repository\"\n                   fs -> do areDirs <- mapM doesDirectoryReallyExist fs\n                            if and areDirs then\n                              return $\n                                \"The following directories \" ++\n                                  msg_are msgs ++ \" already in the repository\"\n                              else\n                              (if or areDirs then\n                                 return $\n                                   \"The following files and directories \" ++\n                                     msg_are msgs ++ \" already in the repository\"\n                                 else\n                                 return $\n                                   \"The following files \" ++\n                                     msg_are msgs ++ \" already in the repository\")\n     putInfo $ dupMsg ++ caseMsg\n     mapM_ putInfo uniq_dups","unless (null dups)\n  (do dupMsg <- case uniq_dups of\n                    [f] -> do isDir <- doesDirectoryReallyExist f\n                              if isDir then\n                                return $\n                                  \"The following directory \" ++\n                                    msg_is msgs ++ \" already in the repository\"\n                                else\n                                return $\n                                  \"The following file \" ++\n                                    msg_is msgs ++ \" already in the repository\"\n                    fs -> do areDirs <- mapM doesDirectoryReallyExist fs\n                             if and areDirs then\n                               return $\n                                 \"The following directories \" ++\n                                   msg_are msgs ++ \" already in the repository\"\n                               else\n                               (if or areDirs then\n                                  return $\n                                    \"The following files and directories \" ++\n                                      msg_are msgs ++ \" already in the repository\"\n                                  else\n                                  return $\n                                    \"The following files \" ++\n                                      msg_are msgs ++ \" already in the repository\")\n      putInfo $ dupMsg ++ caseMsg\n      mapM_ putInfo uniq_dups)");
idea("Error: Redundant do","Darcs/Commands/Add.lhs",176,3,"do return (cur, Nothing, Just f)","return (cur, Nothing, Just f)");
idea("Error: Redundant do","Darcs/Commands/Add.lhs",176,3,"do if is_badfilename then\n     do putInfo $\n          \"The filename \" ++\n            f ++ \" is invalid under Windows.\\nUse --reserved-ok to allow it.\"\n        return add_failure\n     else\n     do isdir <- doesDirectoryReallyExist f\n        if isdir then trypatch $ myadddir f else\n          do isfile <- doesFileReallyExist f\n             if isfile then trypatch $ myaddfile f else\n               do islink <- isFileReallySymlink f\n                  if islink then\n                    putInfo $\n                      \"Sorry, file \" ++\n                        f ++ \" is a symbolic link, which is unsupported by darcs.\"\n                    else putInfo $ \"File \" ++ f ++ \" does not exist!\"\n                  return add_failure","if is_badfilename then\n  do putInfo $\n       \"The filename \" ++\n         f ++ \" is invalid under Windows.\\nUse --reserved-ok to allow it.\"\n     return add_failure\n  else\n  do isdir <- doesDirectoryReallyExist f\n     if isdir then trypatch $ myadddir f else\n       do isfile <- doesFileReallyExist f\n          if isfile then trypatch $ myaddfile f else\n            do islink <- isFileReallySymlink f\n               if islink then\n                 putInfo $\n                   \"Sorry, file \" ++\n                     f ++ \" is a symbolic link, which is unsupported by darcs.\"\n                 else putInfo $ \"File \" ++ f ++ \" does not exist!\"\n               return add_failure");
idea("Warning: Eta reduce","Darcs/Commands/Add.lhs",285,1,"get_parentdir f = reverse $ drop 1 $ dropWhile (/= '/') $ reverse f","get_parentdir = reverse . drop 1 . dropWhile (/= '/') . reverse");
idea("Warning: Redundant brackets","Darcs/Commands/AmendRecord.lhs",130,49,"if (nullFL chs && not edit_metadata) then\n  putStrLn \"You don't want to record anything!\" else\n  do let old_pinf = info oldp\n         prior = (pi_name old_pinf, pi_log old_pinf)\n         make_log = world_readable_temp \"darcs-amend-record\"\n         old_author = pi_author old_pinf\n     author_here <- get_easy_author\n     case author_here of\n         Nothing -> return ()\n         Just ah -> let edit_author = isJust (get_author opts) in\n                      if (edit_author || ah == old_author) then return () else\n                        do yorn <- askUser $\n                                     \"You're not \" ++ old_author ++ \"! Amend anyway? \"\n                           case yorn of\n                               ('y' : _) -> return ()\n                               _ -> exitWith $ ExitSuccess\n     (new_name, new_log, _) <- get_log opts (Just prior) make_log chs\n     let new_author\n           = case get_author opts of\n                 Just a -> a\n                 Nothing -> pi_author old_pinf\n         maybe_invert = if is_inverted old_pinf then invert_name else id\n         new_pinf\n           = maybe_invert $ patchinfo date new_name new_author new_log\n         newp = fixp oldp chs new_pinf\n     defineChanges newp\n     withGutsOf repository $\n       do tentativelyRemovePatches repository opts\n            (hopefully oldp :>: NilFL)\n          tentativelyAddPatch repository opts newp\n          finalizeRepositoryChanges repository\n     sync_repo repository\n     putStrLn \"Finished amending patch:\"\n     putDocLn $ description newp","if nullFL chs && not edit_metadata then\n  putStrLn \"You don't want to record anything!\" else\n  do let old_pinf = info oldp\n         prior = (pi_name old_pinf, pi_log old_pinf)\n         make_log = world_readable_temp \"darcs-amend-record\"\n         old_author = pi_author old_pinf\n     author_here <- get_easy_author\n     case author_here of\n         Nothing -> return ()\n         Just ah -> let edit_author = isJust (get_author opts) in\n                      if (edit_author || ah == old_author) then return () else\n                        do yorn <- askUser $\n                                     \"You're not \" ++ old_author ++ \"! Amend anyway? \"\n                           case yorn of\n                               ('y' : _) -> return ()\n                               _ -> exitWith $ ExitSuccess\n     (new_name, new_log, _) <- get_log opts (Just prior) make_log chs\n     let new_author\n           = case get_author opts of\n                 Just a -> a\n                 Nothing -> pi_author old_pinf\n         maybe_invert = if is_inverted old_pinf then invert_name else id\n         new_pinf\n           = maybe_invert $ patchinfo date new_name new_author new_log\n         newp = fixp oldp chs new_pinf\n     defineChanges newp\n     withGutsOf repository $\n       do tentativelyRemovePatches repository opts\n            (hopefully oldp :>: NilFL)\n          tentativelyAddPatch repository opts newp\n          finalizeRepositoryChanges repository\n     sync_repo repository\n     putStrLn \"Finished amending patch:\"\n     putDocLn $ description newp");
idea("Warning: Redundant brackets","Darcs/Commands/AmendRecord.lhs",141,26,"if (edit_author || ah == old_author) then return () else\n  do yorn <- askUser $\n               \"You're not \" ++ old_author ++ \"! Amend anyway? \"\n     case yorn of\n         ('y' : _) -> return ()\n         _ -> exitWith $ ExitSuccess","if edit_author || ah == old_author then return () else\n  do yorn <- askUser $\n               \"You're not \" ++ old_author ++ \"! Amend anyway? \"\n     case yorn of\n         ('y' : _) -> return ()\n         _ -> exitWith $ ExitSuccess");
idea("Error: Redundant $","Darcs/Commands/AmendRecord.lhs",147,61,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Use unless","Darcs/Commands/Annotate.lhs",117,48,"when (not $ have_nonrange_match opts) $\n  fail $\n    \"Annotate requires either a patch pattern or a \" ++\n      \"file or directory argument.\"","unless (have_nonrange_match opts)\n  (fail $\n     \"Annotate requires either a patch pattern or a \" ++\n       \"file or directory argument.\")");
idea("Warning: Redundant brackets","Darcs/Commands/Annotate.lhs",160,9,"patch2patchinfo `unseal2` (match_patch opts r)","patch2patchinfo `unseal2` match_patch opts r");
idea("Warning: Redundant brackets","Darcs/Commands/Annotate.lhs",206,11,"('#' : s)","'#' : s");
idea("Warning: Redundant brackets","Darcs/Commands/Annotate.lhs",249,3,"y ++ (strReplace x y zs)","y ++ strReplace x y zs");
idea("Warning: Redundant brackets","Darcs/Commands/Annotate.lhs",250,3,"z : (strReplace x y zs)","z : strReplace x y zs");
idea("Error: Use mapM_","Darcs/Commands/Annotate.lhs",299,1,"sequence_ $ map (annotate_markedup opts pinfo old_pis) mk","mapM_ (annotate_markedup opts pinfo old_pis) mk");
idea("Error: Use when","Darcs/Commands/Annotate.lhs",327,1,"if wheni `elem` old_pis then\n  do putAnn $ text \"Following line added by \" <> showPatchInfo wheni\n     putLine ' ' l\n  else return ()","when (wheni `elem` old_pis) $\n  do putAnn $ text \"Following line added by \" <> showPatchInfo wheni\n     putLine ' ' l");
idea("Warning: Eta reduce","Darcs/Commands/Annotate.lhs",351,1,"putAnn s = putDocLn $ prefix \"# \" s","putAnn = putDocLn . prefix \"# \"");
idea("Error: Use when","Darcs/Commands/Annotate.lhs",368,1,"if wheni `elem` old_pis then\n  putDocLn $\n    text \"<normal_line>\" $$ text \"<added_by>\" $$ to_xml wheni $$\n      text \"</added_by>\"\n      $$ escapeXML (unpackPS l)\n      $$ text \"</normal_line>\"\n  else return ()","when (wheni `elem` old_pis) $\n  putDocLn $\n    text \"<normal_line>\" $$ text \"<added_by>\" $$ to_xml wheni $$\n      text \"</added_by>\"\n      $$ escapeXML (unpackPS l)\n      $$ text \"</normal_line>\"");
idea("Warning: Eta reduce","Darcs/Commands/Apply.lhs",220,17,"stripCrPS ps = unlinesPS $ map stripline $ linesPS ps","stripCrPS = unlinesPS . map stripline . linesPS");
idea("Warning: Redundant brackets","Darcs/Commands/Apply.lhs",348,23,"do a <- doit\n   hClose stdout\n   hClose stderr\n   return a\n  `catch` (sendit tempf)","do a <- doit\n   hClose stdout\n   hClose stderr\n   return a\n  `catch` sendit tempf");
idea("Warning: Eta reduce","Darcs/Commands/Apply.lhs",374,11,"sanitize s = wash $ remove_backspaces \"\" s","sanitize = wash . remove_backspaces \"\"");
idea("Warning: Eta reduce","Darcs/Commands/Apply.lhs",385,1,"throwIO e = return $ throw e","throwIO = return . throw");
idea("Warning: Eta reduce","Darcs/Commands/Changes.lhs",121,7,"filtered_changes p = maybe_reverse $ get_changes_info opts filez p","filtered_changes = maybe_reverse . get_changes_info opts filez");
idea("Error: Redundant $","Darcs/Commands/Changes.lhs",163,9,"map (\\ x -> \"./\" ++ x) $ plain_fs","map (\\ x -> \"./\" ++ x) plain_fs");
idea("Warning: Use const","Darcs/Commands/Changes.lhs",170,20,"\\ _ -> True","const True");
idea("Error: Use unless","Darcs/Commands/Changes.lhs",264,1,"when\n  (not $\n     null (unsafeUnRL r) || null (unsafeUnRL $ head $ unsafeUnRL r))\n  $\n  putDocLnWith simplePrinters $\n    changelog opts' NilRL $\n      get_changes_info opts' []\n        (headRL (slightly_optimize_patchset r) :<: NilRL)","unless\n  (null (unsafeUnRL r) || null (unsafeUnRL $ head $ unsafeUnRL r))\n  (putDocLnWith simplePrinters $\n     changelog opts' NilRL $\n       get_changes_info opts' []\n         (headRL (slightly_optimize_patchset r) :<: NilRL))");
idea("Warning: Eta reduce","Darcs/Commands/Check.lhs",101,7,"putVerbose s = when (Verbose `elem` opts) $ putDocLn s","putVerbose = when (Verbose `elem` opts) . putDocLn");
idea("Error: Use unless","Darcs/Commands/Check.lhs",102,7,"when (not $ Quiet `elem` opts) $ putDocLn s","unless (Quiet `elem` opts) (putDocLn s)");
idea("Warning: Eta reduce","Darcs/Commands/Check.lhs",102,7,"putInfo s = when (not $ Quiet `elem` opts) $ putDocLn s","putInfo = when (not $ Quiet `elem` opts) . putDocLn");
idea("Error: Redundant $","Darcs/Commands/Diff.lhs",137,5,"bug $ \"parseCmd should never return empty list\"","bug \"parseCmd should never return empty list\"");
idea("Warning: Eta reduce","Darcs/Commands/Diff.lhs",246,1,"changelog pis = vcat $ map human_friendly pis","changelog = vcat . map human_friendly");
idea("Warning: Redundant brackets","Darcs/Commands/Dist.lhs",95,31,"setCurrentDirectory (formerdir)","setCurrentDirectory formerdir");
idea("Warning: Redundant brackets","Darcs/Commands/Dist.lhs",95,31,"\"/\" ++ (basename distname)","\"/\" ++ basename distname");
idea("Warning: Redundant brackets","Darcs/Commands/Get.lhs",122,1,"(command_command initialize) opts'","command_command initialize opts'");
idea("Warning: Eta reduce","Darcs/Commands/Get.lhs",163,15,"putInfo s = when am_informative $ putDocLn s","putInfo = when am_informative . putDocLn");
idea("Error: Redundant do","Darcs/Commands/Get.lhs",176,41,"do if\n     format_has HashedInventory rf ||\n       format_has HashedInventory rfsource\n     then\n     do debugMessage \"Identifying and copying repository...\"\n        identifyRepositoryFor repository repodir >>= copyRepository\n        when (SetScriptsExecutable `elem` opts) setScriptsExecutable\n     else copy_repo_old_fashioned repository opts repodir","if\n  format_has HashedInventory rf ||\n    format_has HashedInventory rfsource\n  then\n  do debugMessage \"Identifying and copying repository...\"\n     identifyRepositoryFor repository repodir >>= copyRepository\n     when (SetScriptsExecutable `elem` opts) setScriptsExecutable\n  else copy_repo_old_fashioned repository opts repodir");
idea("Error: Use when","Darcs/Commands/Get.lhs",297,1,"if SetScriptsExecutable `elem` opts then setScriptsExecutable else\n  return ()","when (SetScriptsExecutable `elem` opts) $\n  _noParen_ setScriptsExecutable");
idea("Error: Redundant do","Darcs/Commands/Get.lhs",297,1,"do if SetScriptsExecutable `elem` opts then setScriptsExecutable\n     else return ()","if SetScriptsExecutable `elem` opts then setScriptsExecutable else\n  return ()");
idea("Error: Redundant $","Darcs/Commands/Help.lhs",76,1,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Redundant $","Darcs/Commands/Help.lhs",82,1,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Use when","Darcs/Commands/Mv.lhs",183,1,"if slurp_hasdir (fp2fn old) work then\n  do debugMessage $ unwords [\"renameDirectory\", old, new]\n     renameDirectory old new\n  else return ()","when (slurp_hasdir (fp2fn old) work) $\n  do debugMessage $ unwords [\"renameDirectory\", old, new]\n     renameDirectory old new");
idea("Error: Use isPrefixOf","Darcs/Commands/Optimize.lhs",110,1,"take 4 (just_name pinfo) == \"TAG \"","\"TAG \" `isPrefixOf` just_name pinfo");
idea("Warning: Eta reduce","Darcs/Commands/Optimize.lhs",187,1,"mymatch r = match_name $ matchRegex (mkRegex r)","mymatch = match_name . matchRegex . mkRegex");
idea("Warning: Eta reduce","Darcs/Commands/Optimize.lhs",189,1,"match_name ch pinfo = isJust $ ch (just_name pinfo)","match_name ch = isJust . ch . just_name");
idea("Warning: Redundant brackets","Darcs/Commands/Optimize.lhs",250,1,"if (siblings == []) then\n  putStrLn \"No siblings -- no relinking done.\" else\n  do when (Relink `elem` opts) $\n       do debugMessage \"Relinking patches...\"\n          patches <- (liftM list_slurpy_files)\n                       (slurp $ darcsdir ++ \"/patches\")\n          maybeRelinkFiles siblings patches (darcsdir ++ \"/patches\")\n     when (RelinkPristine `elem` opts) $\n       do pristine <- identifyPristine\n          case (pristineDirectory pristine) of\n              (Just d) -> do debugMessage \"Relinking pristine tree...\"\n                             c <- slurp_recorded repository\n                             maybeRelinkFiles siblings (list_slurpy_files c) d\n              Nothing -> return ()\n     debugMessage \"Done relinking.\"\n     return ()","if siblings == [] then putStrLn \"No siblings -- no relinking done.\"\n  else\n  do when (Relink `elem` opts) $\n       do debugMessage \"Relinking patches...\"\n          patches <- (liftM list_slurpy_files)\n                       (slurp $ darcsdir ++ \"/patches\")\n          maybeRelinkFiles siblings patches (darcsdir ++ \"/patches\")\n     when (RelinkPristine `elem` opts) $\n       do pristine <- identifyPristine\n          case (pristineDirectory pristine) of\n              (Just d) -> do debugMessage \"Relinking pristine tree...\"\n                             c <- slurp_recorded repository\n                             maybeRelinkFiles siblings (list_slurpy_files c) d\n              Nothing -> return ()\n     debugMessage \"Done relinking.\"\n     return ()");
idea("Warning: Redundant brackets","Darcs/Commands/Optimize.lhs",258,34,"(liftM list_slurpy_files) (slurp $ darcsdir ++ \"/patches\")","liftM list_slurpy_files (slurp $ darcsdir ++ \"/patches\")");
idea("Warning: Redundant brackets","Darcs/Commands/Pull.lhs",114,7,"if (Quiet `elem` opts || XMLOutput `elem` opts) then\n  \\ _ -> return () else logDocLn","if Quiet `elem` opts || XMLOutput `elem` opts then \\ _ -> return ()\n  else logDocLn");
idea("Error: Use unless","Darcs/Commands/Pull.lhs",116,28,"when (not $ nullFL ps) $\n  putDocLn $\n    text \"They have the following patches to pull:\" $$\n      (vcat $ mapFL description ps)","unless (nullFL ps)\n  (putDocLn $\n     text \"They have the following patches to pull:\" $$\n       (vcat $ mapFL description ps))");
idea("Error: Use mapM_","Darcs/Commands/Pull.lhs",116,28,"mapM (show_motd opts) repodirs","mapM_ (show_motd opts) repodirs");
idea("Warning: Eta reduce","Darcs/Commands/Push.lhs",97,7,"putVerbose s = when am_verbose $ putDocLn s","putVerbose = when am_verbose . putDocLn");
idea("Error: Use unless","Darcs/Commands/Push.lhs",98,7,"when (not am_quiet) $ putDocLn s","unless am_quiet (putDocLn s)");
idea("Warning: Eta reduce","Darcs/Commands/Push.lhs",98,7,"putInfo s = when (not am_quiet) $ putDocLn s","putInfo = when (not am_quiet) . putDocLn");
idea("Error: Redundant do","Darcs/Commands/Push.lhs",107,52,"do when (want_sign opts) $\n     let msg\n           = text\n               \"Signing doesn't make sense for local repositories or when pushing over ssh.\"\n       in\n       if DryRun `elem` opts then putInfo $ text \"NOTE:\" <+> msg else\n         errorDoc msg","when (want_sign opts) $\n  let msg\n        = text\n            \"Signing doesn't make sense for local repositories or when pushing over ssh.\"\n    in\n    if DryRun `elem` opts then putInfo $ text \"NOTE:\" <+> msg else\n      errorDoc msg");
idea("Error: Redundant $","Darcs/Commands/Push.lhs",173,15,"putStrLn $ \"Apply failed!\"","putStrLn \"Apply failed!\"");
idea("Warning: Use :","Darcs/Commands/Put.lhs",50,1,"[applyas] ++ network_options","applyas : network_options");
idea("Error: Redundant do","Darcs/Commands/Put.lhs",67,1,"do remoteInit req_absolute_repo_dir initopts","remoteInit req_absolute_repo_dir initopts");
idea("Warning: Redundant brackets","Darcs/Commands/Put.lhs",67,1,"(command_command initialize) initopts","command_command initialize initopts");
idea("Error: Use unless","Darcs/Commands/Put.lhs",69,7,"when (not am_quiet) $ putStrLn s","unless am_quiet (putStrLn s)");
idea("Warning: Eta reduce","Darcs/Commands/Put.lhs",69,7,"putInfo s = when (not am_quiet) $ putStrLn s","putInfo = when (not am_quiet) . putStrLn");
idea("Warning: Use liftM","Darcs/Commands/Put.lhs",101,19,"read_repo repository >>= (return . seal)","liftM seal (read_repo repository)");
idea("Warning: Use liftM","Darcs/Commands/Put.lhs",104,20,"read_repo repository >>= (return . seal)","liftM seal (read_repo repository)");
idea("Error: Redundant $","Darcs/Commands/Put.lhs",120,16,"putStrLn $ \"Apply failed!\"","putStrLn \"Apply failed!\"");
idea("Error: Use unless","Darcs/Commands/Record.lhs",139,27,"when (not $ null existing_files) $\n  logMessage $\n    \"Recording changes in \" ++\n      unwords (map show existing_files) ++ \":\\n\"","unless (null existing_files)\n  (logMessage $\n     \"Recording changes in \" ++\n       unwords (map show existing_files) ++ \":\\n\")");
idea("Error: Use unless","Darcs/Commands/Record.lhs",139,27,"when (not $ null non_existent_files) $\n  logMessage $\n    \"Non existent files or directories: \" ++\n      unwords (map show non_existent_files) ++ \"\\n\"","unless (null non_existent_files)\n  (logMessage $\n     \"Non existent files or directories: \" ++\n       unwords (map show non_existent_files) ++ \"\\n\")");
idea("Warning: Redundant brackets","Darcs/Commands/Record.lhs",156,7,"if ((not $ null existing_files) || (not $ null non_existent_files))\n  then logMessage \"No changes in selected files or directories!\" else\n  logMessage \"No changes!\"","if (not $ null existing_files) || (not $ null non_existent_files)\n  then logMessage \"No changes in selected files or directories!\" else\n  logMessage \"No changes!\"");
idea("Error: Redundant do","Darcs/Commands/Record.lhs",229,2,"do cleanLocalDate `fmap` askUser \"What is the date? \"","cleanLocalDate `fmap` askUser \"What is the date? \"");
idea("Error: Use isPrefixOf","Darcs/Commands/Record.lhs",261,44,"take 4 n == \"TAG \"","\"TAG \" `isPrefixOf` n");
idea("Error: Use isPrefixOf","Darcs/Commands/Record.lhs",315,11,"take 4 n == \"TAG \"","\"TAG \" `isPrefixOf` n");
idea("Warning: Eta reduce","Darcs/Commands/Repair.lhs",111,7,"putVerbose s = when (Verbose `elem` opts) $ putDocLn s","putVerbose = when (Verbose `elem` opts) . putDocLn");
idea("Error: Use unless","Darcs/Commands/Repair.lhs",112,7,"when (not $ Quiet `elem` opts) $ putDocLn s","unless (Quiet `elem` opts) (putDocLn s)");
idea("Warning: Eta reduce","Darcs/Commands/Repair.lhs",112,7,"putInfo s = when (not $ Quiet `elem` opts) $ putDocLn s","putInfo = when (not $ Quiet `elem` opts) . putDocLn");
idea("Warning: Redundant brackets","Darcs/Commands/Repair.lhs",169,17,"if ((i :: Int) + 1 < 100) then i + 1 else 0","if (i :: Int) + 1 < 100 then i + 1 else 0");
idea("Error: Use mapM","Darcs/Commands/Replace.lhs",137,10,"sequence (map (repl toks cur work) fs)","mapM (repl toks cur work) fs");
idea("Error: Redundant $","Darcs/Commands/Replace.lhs",146,9,"putStrLn $ \"Use the --force option to override.\"","putStrLn \"Use the --force option to override.\"");
idea("Error: Use all","Darcs/Commands/Replace.lhs",179,1,"and $ map (regChars toks) s","all (regChars toks) s");
idea("Error: Redundant $","Darcs/Commands/Replace.lhs",183,5,"bad_token_spec $ \"Space is not allowed in the spec\"","bad_token_spec \"Space is not allowed in the spec\"");
idea("Error: Redundant $","Darcs/Commands/Replace.lhs",187,5,"bad_token_spec $ \"It should be enclosed in square brackets\"","bad_token_spec \"It should be enclosed in square brackets\"");
idea("Error: Redundant $","Darcs/Commands/Revert.lhs",110,27,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Error: Use unless","Darcs/Commands/Rollback.lhs",104,48,"when (not $ null existing_files) $\n  logMessage $\n    \"Recording changes in \" ++ unwords existing_files ++ \":\\n\"","unless (null existing_files)\n  (logMessage $\n     \"Recording changes in \" ++ unwords existing_files ++ \":\\n\")");
idea("Error: Use unless","Darcs/Commands/Rollback.lhs",104,48,"when (not $ null non_existent_files) $\n  logMessage $\n    \"Non existent files or directories: \" ++\n      unwords non_existent_files ++ \"\\n\"","unless (null non_existent_files)\n  (logMessage $\n     \"Non existent files or directories: \" ++\n       unwords non_existent_files ++ \"\\n\")");
idea("Error: Redundant $","Darcs/Commands/Rollback.lhs",128,47,"logMessage $ \"Finished rolling back.\"","logMessage \"Finished rolling back.\"");
idea("Warning: Eta reduce","Darcs/Commands/Send.lhs",171,7,"putVerbose s = when am_verbose $ putDocLn s","putVerbose = when am_verbose . putDocLn");
idea("Error: Use unless","Darcs/Commands/Send.lhs",172,7,"when (not am_quiet) $ putStrLn s","unless am_quiet (putStrLn s)");
idea("Warning: Eta reduce","Darcs/Commands/Send.lhs",172,7,"putInfo s = when (not am_quiet) $ putStrLn s","putInfo = when (not am_quiet) . putStrLn");
idea("Warning: Eta reduce","Darcs/Commands/Send.lhs",173,7,"patch_desc p = just_name $ info p","patch_desc = just_name . info");
idea("Warning: Eta reduce","Darcs/Commands/Send.lhs",174,7,"make_fname tbs = patch_filename $ patch_desc $ headFL tbs","make_fname = patch_filename . patch_desc . headFL");
idea("Warning: Redundant brackets","Darcs/Commands/Send.lhs",226,16,"sendEmailDoc from (lt [t | SendMail t <- thetargets]) (thesubject)","sendEmailDoc from (lt [t | SendMail t <- thetargets]) thesubject");
idea("Warning: Redundant brackets","Darcs/Commands/Send.lhs",230,27,"(fromJust mailfile) ++ \".\"","fromJust mailfile ++ \".\"");
idea("Warning: Use forM_","Darcs/Commands/Send.lhs",294,1,"flip mapM_","forM_");
idea("Warning: Redundant brackets","Darcs/Commands/Send.lhs",294,1,"(flip mapM_)","flip mapM_");
idea("Warning: Eta reduce","Darcs/Commands/Send.lhs",331,11,"putInfoLn s = unless (Quiet `elem` opts) $ putStrLn s","putInfoLn = unless (Quiet `elem` opts) . putStrLn");
idea("Error: Redundant do","Darcs/Commands/Send.lhs",351,1,"do liftM ((: []) . SendMail) $\n     askUser \"What is the target email address? \"","liftM ((: []) . SendMail) $\n  askUser \"What is the target email address? \"");
idea("Error: Use unless","Darcs/Commands/SetPref.lhs",103,53,"when (not $ pref `elem` valid_pref_data) $\n  do putStrLn $ \"'\" ++ pref ++ \"' is not a valid preference name!\"\n     putStrLn $ \"Try one of:  \" ++ unwords valid_pref_data ++ \"\"\n     exitWith $ ExitFailure 1","unless (pref `elem` valid_pref_data)\n  (do putStrLn $ \"'\" ++ pref ++ \"' is not a valid preference name!\"\n      putStrLn $ \"Try one of:  \" ++ unwords valid_pref_data ++ \"\"\n      exitWith $ ExitFailure 1)");
idea("Warning: Use &&&","Darcs/Commands/ShowAuthors.lhs",66,46,"\\ s -> (length s, head s)","length &&& head");
idea("Warning: Use const","Darcs/Commands/ShowFiles.lhs",91,27,"\\ _ -> []","const []");
idea("Warning: Redundant brackets","Darcs/Commands/ShowFiles.lhs",98,10,"(to_list opts) `fmap` withRepository opts slurp","to_list opts `fmap` withRepository opts slurp");
idea("Warning: Eta reduce","Darcs/Commands/ShowRepo.lhs",116,1,"showInfoXML t i = show $ tag (safeTag t) $ stringToHtml i","showInfoXML t = show . tag (safeTag t) . stringToHtml");
idea("Warning: Redundant brackets","Darcs/Commands/ShowRepo.lhs",121,1,"\"num_\" ++ (safeTag cs)","\"num_\" ++ safeTag cs");
idea("Warning: Redundant brackets","Darcs/Commands/ShowRepo.lhs",127,1,"(replicate (14 - length (t)) ' ') ++\n  t ++\n    \": \" ++\n      (concat $ intersperse ('\\n' : (replicate 16 ' ')) $ lines i) ++\n        \"\\n\"","replicate (14 - length (t)) ' ' ++\n  t ++\n    \": \" ++\n      (concat $ intersperse ('\\n' : (replicate 16 ' ')) $ lines i) ++\n        \"\\n\"");
idea("Warning: Redundant brackets","Darcs/Commands/ShowRepo.lhs",127,1,"length (t)","length t");
idea("Warning: Redundant brackets","Darcs/Commands/ShowRepo.lhs",127,1,"'\\n' : (replicate 16 ' ')","'\\n' : replicate 16 ' '");
idea("Warning: Use liftM","Darcs/Commands/ShowRepo.lhs",187,1,"read_repo r >>= (return . sum . unsafeUnRL . mapRL_RL lengthRL)","liftM (sum . unsafeUnRL . mapRL_RL lengthRL) (read_repo r)");
idea("Warning: Use >>=","Darcs/Commands/ShowTags.lhs",72,15,"do t' <- normalize t t False\n   putStrLn t'","normalize t t False >>= putStrLn");
idea("Error: Redundant $","Darcs/Commands/TrackDown.lhs",83,11,"return $ (return ExitSuccess, system cmd)","return (return ExitSuccess, system cmd)");
idea("Error: Redundant $","Darcs/Commands/TrackDown.lhs",86,11,"return $ (system init, system cmd)","return (system init, system cmd)");
idea("Error: Redundant $","Darcs/Commands/TransferMode.lhs",66,1,"withCurrentDirectory darcsdir $ transfer","withCurrentDirectory darcsdir transfer");
idea("Error: Use print","Darcs/Commands/TransferMode.lhs",75,17,"putStrLn $ show $ lengthPS c","print (lengthPS c)");
idea("Error: Use print","Darcs/Commands/TransferMode.lhs",79,17,"putStrLn $ show e","print e");
idea("Error: Redundant do","Darcs/Commands/Unrevert.lhs",118,1,"do case commutex (ps :< pend) of\n       Nothing -> do really <- askUser\n                                 \"You will not be able to unrevert this operation! Proceed? \"\n                     case really of\n                         ('y' : _) -> return ()\n                         _ -> exitWith $ ExitSuccess\n                     write_unrevert repository NilFL rec pend\n       Just (_ :< p') -> do rep <- read_repo repository\n                            case get_common_and_uncommon (rep, rep) of\n                                (common, _ :\\/: _) -> do date <- getIsoDateTime\n                                                         writeDocBinFile (unrevertUrl repository) $\n                                                           make_bundle [Unified] rec common\n                                                             (namepatch date \"unrevert\" \"anonymous\"\n                                                                []\n                                                                (fromRepoPrims repository p')\n                                                                :>: NilFL)\n                                  where  \n                                        fromRepoPrims ::\n                                                        (RepoPatch p) =>\n                                                        Repository p C (r u t) ->\n                                                          FL Prim C (r y) -> p C (r y)\n                                        fromRepoPrims _ xs = fromPrims xs","case commutex (ps :< pend) of\n    Nothing -> do really <- askUser\n                              \"You will not be able to unrevert this operation! Proceed? \"\n                  case really of\n                      ('y' : _) -> return ()\n                      _ -> exitWith $ ExitSuccess\n                  write_unrevert repository NilFL rec pend\n    Just (_ :< p') -> do rep <- read_repo repository\n                         case get_common_and_uncommon (rep, rep) of\n                             (common, _ :\\/: _) -> do date <- getIsoDateTime\n                                                      writeDocBinFile (unrevertUrl repository) $\n                                                        make_bundle [Unified] rec common\n                                                          (namepatch date \"unrevert\" \"anonymous\" []\n                                                             (fromRepoPrims repository p')\n                                                             :>: NilFL)\n                               where  \n                                     fromRepoPrims ::\n                                                     (RepoPatch p) =>\n                                                     Repository p C (r u t) ->\n                                                       FL Prim C (r y) -> p C (r y)\n                                     fromRepoPrims _ xs = fromPrims xs");
idea("Error: Redundant $","Darcs/Commands/Unrevert.lhs",122,34,"exitWith $ ExitSuccess","exitWith ExitSuccess");
idea("Warning: Eta reduce","Darcs/Commands/Unrevert.lhs",134,23,"fromRepoPrims _ xs = fromPrims xs","fromRepoPrims _ = fromPrims");
idea("Warning: Eta reduce","Darcs/Commands/WhatsNew.lhs",117,11,"lower_as x = vcat $ map (text . l_as) $ lines x","lower_as = vcat . map (text . l_as) . lines");
idea("Warning: Eta reduce","Darcs/Patch/Apply.lhs",123,5,"apply opts p = applyFL opts $ effect p","apply opts = applyFL opts . effect");
idea("Error: Redundant do","Darcs/Patch/Apply.lhs",128,5,"do mapMaybeSnd ComP `liftM` applyAndTryToFixFL x","mapMaybeSnd ComP `liftM` applyAndTryToFixFL x");
idea("Error: Redundant $","Darcs/Patch/Apply.lhs",234,21,"fail $ \"applyHunkLines: Bad patch!\"","fail \"applyHunkLines: Bad patch!\"");
idea("Warning: Eta reduce","Darcs/Patch/Apply.lhs",271,11,"forceReplace ps = concatPS $ map o_t_n $ toks_and_intratoks ps","forceReplace = concatPS . map o_t_n . toks_and_intratoks");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",447,9,"parent == (nameI f)","parent == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",450,9,"(nameI f) == n","nameI f == n");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",458,9,"parent == (nameI f)","parent == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",460,21,"PopDir\n  (Info{nameI = path, modifiedByI = pi, modifiedHowI = AddedDir,\n        createdByI = Just pi, creationNameI = Just $ fn2ps d})","PopDir\n  Info{nameI = path, modifiedByI = pi, modifiedHowI = AddedDir,\n       createdByI = Just pi, creationNameI = Just $ fn2ps d}");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",467,9,"path == (nameI f)","path == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",473,9,"parent == (nameI f)","parent == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",475,21,"PopFile\n  (Info{nameI = path, modifiedByI = pi, modifiedHowI = AddedFile,\n        createdByI = Just pi, creationNameI = Just $ fn2ps d})","PopFile\n  Info{nameI = path, modifiedByI = pi, modifiedHowI = AddedFile,\n       createdByI = Just pi, creationNameI = Just $ fn2ps d}");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",481,9,"path == (nameI f)","path == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",485,9,"path == (nameI f)","path == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",491,9,"(nameI f) == n","nameI f == n");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",504,2,"parent == (nameI f)","parent == nameI f");
idea("Warning: Redundant brackets","Darcs/Patch/Apply.lhs",514,2,"(nameI f) == n","nameI f == n");
idea("Warning: Use foldr","Darcs/Patch/Bundle.lhs",150,1,"unavailable_patches [] = unsafeCoerceP NilRL\nunavailable_patches (x : xs)\n  = pi_unavailable x :<: unavailable_patches xs","unavailable_patches xs\n  = foldr (\\ x -> (:<:) (pi_unavailable x)) (unsafeCoerceP NilRL) xs");
idea("Warning: Redundant brackets","Darcs/Patch/Bundle.lhs",154,1,"(i `patchInfoAndPatch`\n   unavailable\n     (\"Patch not stored in patch bundle:\\n\" ++\n        renderString (human_friendly i)))","i `patchInfoAndPatch`\n  unavailable\n    (\"Patch not stored in patch bundle:\\n\" ++\n       renderString (human_friendly i))");
idea("Error: Redundant $","Darcs/Patch/Bundle.lhs",190,1,"map showPatchInfo $ common","map showPatchInfo common");
idea("Error: Use print","Darcs/Patch/Check.lhs",66,5,"putStrLn $ show pc","print pc");
idea("Warning: Redundant brackets","Darcs/Patch/Check.lhs",99,9,"(PJust l : mls)","PJust l : mls");
idea("Warning: Eta reduce","Darcs/Patch/Check.lhs",124,1,"set_contents f mss = PC (sc f mss)","set_contents f = PC . sc f");
idea("Warning: Eta reduce","Darcs/Patch/Check.lhs",215,1,"assert_exists f = assert_not $ NotEx f","assert_exists = assert_not . NotEx");
idea("Warning: Eta reduce","Darcs/Patch/FileName.lhs",52,1,"fp2fn fp = FN fp","fp2fn = FN");
idea("Warning: Eta reduce","Darcs/Patch/FileName.lhs",72,1,"ps2fn ps = FN $ decode_white $ unpackPSfromUTF8 ps","ps2fn = FN . decode_white . unpackPSfromUTF8");
idea("Warning: Redundant brackets","Darcs/Patch/FileName.lhs",115,1,"\"..\" : (drop_dotdot p)","\"..\" : drop_dotdot p");
idea("Warning: Eta reduce","Darcs/Patch/Info.lhs",43,1,"repopatchinfo r pi = RPI r pi","repopatchinfo = RPI");
idea("Warning: Eta reduce","Darcs/Patch/Info.lhs",70,11,"doesnt_start_with x ys = not $ any (`isPrefixOf` x) ys","doesnt_start_with x = not . any (`isPrefixOf` x)");
idea("Warning: Redundant brackets","Darcs/Patch/Info.lhs",177,3,"y ++ (strReplace x y zs)","y ++ strReplace x y zs");
idea("Warning: Redundant brackets","Darcs/Patch/Info.lhs",178,3,"z : (strReplace x y zs)","z : strReplace x y zs");
idea("Warning: Redundant brackets","Darcs/Patch/Info.lhs",204,5,"(take 40 s) ++ \"...\" ++ (reverse $ take 30 $ reverse s)","take 40 s ++ \"...\" ++ (reverse $ take 30 $ reverse s)");
idea("Warning: Eta reduce","Darcs/Patch/Info.lhs",242,5,"show pi = renderString (showPatchInfo pi)","show = renderString . showPatchInfo");
idea("Warning: Use foldr","Darcs/Patch/Info.lhs",266,21,"mul [] = text \"\\n\"\nmul (s : ss) = text \"\\n \" <> packedString s <> mul ss","mul ss\n  = foldr (\\ s -> (<>) (text \"\\n \" <> packedString s)) (text \"\\n\") ss");
idea("Error: Redundant $","Darcs/Patch/Info.lhs",279,18,"return $\n  (PatchInfo{_pi_date = ct, _pi_name = name, _pi_author = author,\n             _pi_log = log, is_inverted = indexPS s2 1 /= '*'},\n   s4)","return\n  (PatchInfo{_pi_date = ct, _pi_name = name, _pi_author = author,\n             _pi_log = log, is_inverted = indexPS s2 1 /= '*'},\n   s4)");
idea("Warning: Eta reduce","Darcs/Patch/Match.lhs",49,1,"make_matcher s m = MATCH s m","make_matcher = MATCH");
idea("Warning: Eta reduce","Darcs/Patch/Match.lhs",208,11,"negate_match a p = not (a p)","negate_match a = not . a");
idea("Warning: Redundant brackets","Darcs/Patch/Match.lhs",209,11,"(m1 p) || (m2 p)","m1 p || m2 p");
idea("Warning: Redundant brackets","Darcs/Patch/Match.lhs",210,11,"(m1 p) && (m2 p)","m1 p && m2 p");
idea("Warning: Eta reduce","Darcs/Patch/Match.lhs",213,1,"trystring s = try $ string s","trystring = try . string");
idea("Warning: Eta reduce","Darcs/Patch/Match.lhs",269,1,"parens p = between (string \"(\") (string \")\") p","parens = between (string \"(\") (string \")\")");
idea("Warning: Use string literal","Darcs/Patch/Match.lhs",272,1,"['\\\\', '\"']","\"\\\\\\\"\"");
idea("Warning: Use string literal","Darcs/Patch/Match.lhs",272,1,"['\"']","\"\\\"\"");
idea("Warning: Redundant brackets","Darcs/Patch/Match.lhs",286,1,"r == (just_name (info hp))","r == just_name (info hp)");
idea("Error: Use any","Darcs/Patch/Match.lhs",296,1,"or $ map (isJust . matchRegex (mkRegex r)) files","any (isJust . matchRegex (mkRegex r)) files");
idea("Warning: Eta reduce","Darcs/Patch/MatchData.lhs",29,1,"patch_match s = PatternMatch s","patch_match = PatternMatch");
idea("Warning: Eta reduce","Darcs/Patch/Permutations.lhs",120,1,"head_permutationsFL ps\n  = map (\\ (x :> xs) -> x :>: xs) $ headPermutationsFL ps","head_permutationsFL\n  = map (\\ (x :> xs) -> x :>: xs) . headPermutationsFL");
idea("Warning: Use on","Darcs/Patch/Permutations.lhs",144,5,"xs =/\\= ys = reverseFL xs =/\\= reverseFL ys","(=/\\=) = (=/\\=) `on` reverseFL");
idea("Warning: Use on","Darcs/Patch/Permutations.lhs",161,5,"xs =\\/= ys = reverseRL xs =\\/= reverseRL ys","(=\\/=) = (=\\/=) `on` reverseRL");
idea("Warning: Eta reduce","Darcs/Patch/Read.lhs",63,2,"readPatch' w = readPrim OldFormat w","readPatch' = readPrim OldFormat");
idea("Error: Redundant $","Darcs/Patch/Read.lhs",80,11,"liftM (Just . seal) $ readChangePref","liftM (Just . seal) readChangePref");
idea("Error: Redundant if","Darcs/Patch/Read.lhs",140,1,"if nullPS s then return False else\n  if headPS s /= '\\n' then return False else\n    alter_input tailPS >> return True","if nullPS s || (headPS s /= '\\n') then return False else\n  alter_input tailPS >> return True");
idea("Warning: Redundant brackets","Darcs/Patch/Read.lhs",255,20,"(NamedP n d) `mapSeal` p","NamedP n d `mapSeal` p");
idea("Warning: Redundant brackets","Darcs/Patch/ReadMonads.hs",22,12,"if nullPS (dropWhitePS s) then (Just ((), nilPS)) else Nothing","if nullPS (dropWhitePS s) then Just ((), nilPS) else Nothing");
idea("Warning: Eta reduce","Darcs/Patch/ReadMonads.hs",51,1,"parse_strictly (SM f) s = f s","parse_strictly (SM f) = f");
idea("Warning: Use const","Darcs/Patch/ReadMonads.hs",61,29,"\\ _ -> Nothing","const Nothing");
idea("Warning: Eta reduce","Darcs/Patch/ReadMonads.hs",64,5,"work f = SM f","work = SM");
idea("Warning: Eta reduce","Darcs/Patch/ReadMonads.hs",72,1,"parse_lazily (LM f) s = f s","parse_lazily (LM f) = f");
idea("Warning: Eta reduce","Darcs/Patch/ReadMonads.hs",80,5,"fail s = error s","fail = error");
idea("Error: Redundant $","Darcs/Patch/Test.lhs",116,1,"fromPrims $ (p n1 n2 :>: NilFL)","fromPrims (p n1 n2 :>: NilFL)");
idea("Warning: Redundant brackets","Darcs/Patch/Test.lhs",142,1,"(invert) `fmap` simplepatchgen","invert `fmap` simplepatchgen");
idea("Error: Redundant do","Darcs/Patch/Test.lhs",292,15,"do check_patch $ fromPrims $ effect p","check_patch $ fromPrims $ effect p");
idea("Error: Use mapM_","Darcs/Patch/Test.lhs",306,1,"mapM (delete_line (fn2fp f) line) old","mapM_ (delete_line (fn2fp f) line) old");
idea("Error: Use mapM_","Darcs/Patch/Test.lhs",306,1,"mapM (insert_line (fn2fp f) line) (reverse new)","mapM_ (insert_line (fn2fp f) line) (reverse new)");
idea("Error: Use mapM_","Darcs/Patch/Test.lhs",315,1,"mapM (delete_line (fn2fp f) 1) (linesPS o)","mapM_ (delete_line (fn2fp f) 1) (linesPS o)");
idea("Error: Use mapM_","Darcs/Patch/Test.lhs",315,1,"mapM (insert_line (fn2fp f) 1) (reverse $ linesPS n)","mapM_ (insert_line (fn2fp f) 1) (reverse $ linesPS n)");
idea("Warning: Redundant brackets","Darcs/Patch/Test.lhs",349,1,"(does_commute p1 p2) ==>\n  (Just (p2 :< p1) == (commutex (p2 :< p1) >>= commutex))","does_commute p1 p2 ==>\n  (Just (p2 :< p1) == (commutex (p2 :< p1) >>= commutex))");
idea("Warning: Redundant brackets","Darcs/Patch/Test.lhs",355,1,"(does_commute p1 p2) ==>\n  case commutex (p2 :< p1) of\n      Just (p1' :< p2') -> check_a_patch $\n                             join_patches [p1, p2, invert p1', invert p2']\n      _ -> impossible","does_commute p1 p2 ==>\n  case commutex (p2 :< p1) of\n      Just (p1' :< p2') -> check_a_patch $\n                             join_patches [p1, p2, invert p1', invert p2']\n      _ -> impossible");
idea("Error: Redundant $","Darcs/Patch/Test.lhs",490,1,"check_a_patch $ tp2","check_a_patch tp2");
idea("Error: Redundant $","Darcs/Patch/Test.lhs",490,1,"check_a_patch $ tp2'","check_a_patch tp2'");
idea("Warning: Redundant brackets","Darcs/Patch/Test.lhs",515,1,"(show tp) ++\n  (if check_a_patch tp then \"At least the patch itself is valid.\\n\"\n     else \"The patch itself is bad!\\n\")\n    ++\n    \"commutex of tp1' and tp2 is \" ++\n      show (commutex (tp1' :< tp2)) ++\n        \"\\n\" ++\n          \"commutex of tp2' and tp1 is \" ++\n            show (commutex (tp2' :< tp1)) ++ \"\\n\"","show tp ++\n  (if check_a_patch tp then \"At least the patch itself is valid.\\n\"\n     else \"The patch itself is bad!\\n\")\n    ++\n    \"commutex of tp1' and tp2 is \" ++\n      show (commutex (tp1' :< tp2)) ++\n        \"\\n\" ++\n          \"commutex of tp2' and tp1 is \" ++\n            show (commutex (tp2' :< tp1)) ++ \"\\n\"");
idea("Error: Use all","Darcs/Patch/Test.lhs",570,1,"and $\n  map (check_a_patch . (\\ l -> join_patches [p, merge_list l])) $\n    resolve_conflicts p","all (check_a_patch . (\\ l -> join_patches [p, merge_list l]))\n  (resolve_conflicts p)");
idea("Warning: Eta reduce","Darcs/Patch/Test.lhs",589,1,"try_tok_possibly t o n mss\n  = mapM\n      (silly_maybe_possibly $\n         liftM concatPS . try_tok_internal t (packString o) (packString n))\n      $ take 1000 mss","try_tok_possibly t o n\n  = mapM\n      (silly_maybe_possibly $\n         liftM concatPS . try_tok_internal t (packString o) (packString n))\n      . take 1000");
idea("Warning: Redundant lambda","Darcs/Patch/Test.lhs",597,6,"silly_maybe_possibly f\n  = \\ px ->\n      case px of\n          PNothing -> Just PNothing\n          PSomething -> Just PSomething\n          PJust x -> case f x of\n                         Nothing -> Nothing\n                         Just x' -> Just $ PJust x'","silly_maybe_possibly f px\n  = case px of\n        PNothing -> Just PNothing\n        PSomething -> Just PSomething\n        PJust x -> case f x of\n                       Nothing -> Nothing\n                       Just x' -> Just $ PJust x'");
idea("Error: Use isPrefixOf","Darcs/Patch/TouchesFiles.lhs",71,7,"take 1 (reverse f) == \"/\"","\"/\" `isPrefixOf` reverse f");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"patchFromTree $ (show_read :: RealPatch -> Maybe Doc)","patchFromTree (show_read :: RealPatch -> Maybe Doc)");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"unseal2 $ (show_read :: FL RealPatch -> Maybe Doc)","unseal2 (show_read :: FL RealPatch -> Maybe Doc)");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"patchFromTree $ is_consistent","patchFromTree is_consistent");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"filter (not_duplicatestriple)","filter not_duplicatestriple");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"filter (not_duplicatestriple)","filter not_duplicatestriple");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree $\n  recommute\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP $\n  recommute\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $ nontrivial_reals","commutePairFromTree nontrivial_reals");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree $\n  recommute\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $ nontrivial_reals","commutePairFromTWFP nontrivial_reals");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP $\n  recommute\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP\n  (recommute\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree $\n  commute_inverses\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP $\n  commute_inverses\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $ nontrivial_reals","commutePairFromTree nontrivial_reals");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree $\n  commute_inverses\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTree $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTree\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $ nontrivial_reals","commutePairFromTWFP nontrivial_reals");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP $\n  commute_inverses\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commutePairFromTWFP $\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commutePairFromTWFP\n  (commute_inverses\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"mergePairFromTWFP $\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))","mergePairFromTWFP\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"mergePairFromTree $\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))","mergePairFromTree\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"mergePairFromTree $ nontrivial_merge_reals","mergePairFromTree nontrivial_merge_reals");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"mergePairFromTree $\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))","mergePairFromTree\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"mergePairFromTWFP $ nontrivial_merge_reals","mergePairFromTWFP nontrivial_merge_reals");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"mergePairFromTWFP $\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))","mergePairFromTWFP\n  (merge_either_way :: ((:\\/:) RealPatch RealPatch -> Maybe Doc))");
idea("Warning: Redundant brackets","Darcs/Patch/Unit.lhs",51,1,"commuteTripleFromTree $\n  (permutivity\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commuteTripleFromTree $\n  permutivity\n    (commute ::\n       ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch)))");
idea("Error: Redundant $","Darcs/Patch/Unit.lhs",51,1,"commuteTripleFromTree $\n  (permutivity\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))","commuteTripleFromTree\n  (permutivity\n     (commute ::\n        ((:>) RealPatch RealPatch -> Maybe ((:>) RealPatch RealPatch))))");
idea("Warning: Eta reduce","Darcs/Patch/Unit.lhs",271,1,"quickhunk l o n\n  = hunk \"test\" l (map (\\ c -> packString [c]) o)\n      (map (\\ c -> packString [c]) n)","quickhunk l o\n  = hunk \"test\" l (map (\\ c -> packString [c]) o) .\n      map (\\ c -> packString [c])");
idea("Warning: Redundant brackets","Darcs/Patch/Viewing.lhs",150,3,"y ++ (strReplace x y zs)","y ++ strReplace x y zs");
idea("Warning: Redundant brackets","Darcs/Patch/Viewing.lhs",151,3,"z : (strReplace x y zs)","z : strReplace x y zs");
idea("Warning: Eta reduce","Darcs/Patch/Viewing.lhs",325,5,"showPatch xs = vcat (mapFL showPatch xs)","showPatch = vcat . mapFL showPatch");
idea("Warning: Eta reduce","Darcs/Repository/ApplyPatches.lhs",48,1,"apply_patches opts ps\n  = apply_patches_with_feedback opts \"Applying patch\" ps","apply_patches opts\n  = apply_patches_with_feedback opts \"Applying patch\"");
idea("Error: Use replicate","Darcs/Repository/Cache.lhs",75,20,"take (10 - l) (repeat '0')","replicate (10 - l) '0'");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",96,11,"(hashedDir subdir) ++ \"/\" ++ f","hashedDir subdir ++ \"/\" ++ f");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",104,11,"(hashedDir subdir) ++ \"/\" ++ f","hashedDir subdir ++ \"/\" ++ f");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",116,1,"(hashedDir s) ++ \"/\" ++ f","hashedDir s ++ \"/\" ++ f");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",117,1,"(hashedDir s) ++ \"/\" ++ f","hashedDir s ++ \"/\" ++ f");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",138,1,"(hashedDir subdir) ++ \"/\" ++ f","hashedDir subdir ++ \"/\" ++ f");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",164,1,"(hashedDir subdir) ++ \" from sources:\\n\\n\" ++ show (Ca cache)","hashedDir subdir ++ \" from sources:\\n\\n\" ++ show (Ca cache)");
idea("Error: Use unless","Darcs/Repository/Cache.lhs",170,12,"when (not $ checkHash f x') $\n  do hPutStrLn stderr $ \"Hash failure in \" ++ fn c\n     fail $ \"Hash failure in \" ++ fn c","unless (checkHash f x')\n  (do hPutStrLn stderr $ \"Hash failure in \" ++ fn c\n      fail $ \"Hash failure in \" ++ fn c)");
idea("Error: Redundant $","Darcs/Repository/Cache.lhs",170,12,"debugMessage $ \"In fetchFileUsingCachePrivate I'm going manually\"","debugMessage \"In fetchFileUsingCachePrivate I'm going manually\"");
idea("Error: Use unless","Darcs/Repository/Cache.lhs",186,20,"when (not $ checkHash f x2) $\n  do hPutStrLn stderr $ \"Hash failure in \" ++ fn c\n     removeFile $ fn c\n     fail $ \"Hash failure in \" ++ fn c","unless (checkHash f x2)\n  (do hPutStrLn stderr $ \"Hash failure in \" ++ fn c\n      removeFile $ fn c\n      fail $ \"Hash failure in \" ++ fn c)");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",207,11,"\"/\" ++ (hashedDir subdir)","\"/\" ++ hashedDir subdir");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",215,1,"\"/\" ++ (hashedDir subdir)","\"/\" ++ hashedDir subdir");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",224,1,"(hashedDir subdir) ++ \" to sources:\\n\\n\" ++ show (Ca cache)","hashedDir subdir ++ \" to sources:\\n\\n\" ++ show (Ca cache)");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",234,11,"(hashedDir subdir) ++ \"/\" ++ hash ++ \"'\"","hashedDir subdir ++ \"/\" ++ hash ++ \"'\"");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",239,11,"\"/\" ++ (hashedDir subdir)","\"/\" ++ hashedDir subdir");
idea("Warning: Redundant brackets","Darcs/Repository/Cache.lhs",239,11,"\"/\" ++ (hashedDir subdir)","\"/\" ++ hashedDir subdir");
idea("Error: Use mapM","Darcs/Repository/Checkpoint.lhs",85,12,"sequence $ map (fetch_checkpoint realdir) pis","mapM (fetch_checkpoint realdir) pis");
idea("Warning: Use foldr","Darcs/Repository/Checkpoint.lhs",132,1,"format_inv [] = empty\nformat_inv (pinfo : ps) = showPatchInfo pinfo $$ format_inv ps","format_inv ps\n  = foldr (\\ pinfo -> ($$) (showPatchInfo pinfo)) empty ps");
idea("Error: Redundant $","Darcs/Repository/Checkpoint.lhs",152,1,"infopatch pinfo $\n  (fromPrims $\n     changepps ps +>+ smart_diff [LookForAdds] ftf empty_slurpy s\n     :: Patch C (() y))","infopatch pinfo\n  (fromPrims $\n     changepps ps +>+ smart_diff [LookForAdds] ftf empty_slurpy s\n     :: Patch C (() y))");
idea("Warning: Redundant brackets","Darcs/Repository/Checkpoint.lhs",170,9,"(map fst) `fmap` read_checkpoints \".\"","map fst `fmap` read_checkpoints \".\"");
idea("Warning: Redundant brackets","Darcs/Repository/Format.lhs",54,11,"(fmap Right) (drfe x)","fmap Right (drfe x)");
idea("Warning: Eta reduce","Darcs/Repository/Format.lhs",63,1,"parse_repo_format ps\n  = RF $ map (splitPS '|') $ filter (not . nullPS) $ linesPS ps","parse_repo_format\n  = RF . map (splitPS '|') . filter (not . nullPS) . linesPS");
idea("Warning: Use :","Darcs/Repository/Format.lhs",70,1,"([map rp2ps flags2inv] ++ maybe2)","(map rp2ps flags2inv) : maybe2");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",52,1,"(hashedDir subdir) ++ \"/\"","hashedDir subdir ++ \"/\"");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",205,27,"runStateT job\n  (HashDir{permissions = RO, cache = c, compress = compr,\n           rootHash = h})","runStateT job\n  HashDir{permissions = RO, cache = c, compress = compr,\n          rootHash = h}");
idea("Error: Use unless","Darcs/Repository/HashedIO.lhs",211,1,"when (not haveitalready) $ speculate cc","unless haveitalready (speculate cc)");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",267,1,"runStateT slh\n  (HashDir{permissions = RO, cache = c, compress = compr,\n           rootHash = h})","runStateT slh\n  HashDir{permissions = RO, cache = c, compress = compr,\n          rootHash = h}");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",298,10,"runStateT (hsl sl)\n  (HashDir{permissions = RW, cache = c, compress = compr,\n           rootHash = sha1PS nilPS})","runStateT (hsl sl)\n  HashDir{permissions = RW, cache = c, compress = compr,\n          rootHash = sha1PS nilPS}");
idea("Error: Redundant $","Darcs/Repository/HashedIO.lhs",329,1,"runStateT sh $\n  HashDir{permissions = RW, cache = c, compress = compression [],\n          rootHash = r}","runStateT sh\n  HashDir{permissions = RW, cache = c, compress = compression [],\n          rootHash = r}");
idea("Error: Redundant $","Darcs/Repository/HashedIO.lhs",349,1,"runStateT cph $\n  HashDir{permissions = RO, cache = c, compress = compr,\n          rootHash = z}","runStateT cph\n  HashDir{permissions = RO, cache = c, compress = compr,\n          rootHash = z}");
idea("Warning: Eta reduce","Darcs/Repository/HashedIO.lhs",363,1,"copyPartialsHashed c compr root\n  = mapM_ (copyPartialHashed c compr root)","copyPartialsHashed c compr = mapM_ . copyPartialHashed c compr");
idea("Error: Redundant $","Darcs/Repository/HashedIO.lhs",366,1,"runStateT (cp $ fp2fn ff) $\n  HashDir{permissions = RO, cache = c, compress = compr,\n          rootHash = root}","runStateT (cp $ fp2fn ff)\n  HashDir{permissions = RO, cache = c, compress = compr,\n          rootHash = root}");
idea("Error: Redundant $","Darcs/Repository/HashedIO.lhs",389,35,"inh d $ readroot","inh d readroot");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",397,1,"(hashedDir dir_) ++ \"...\"","hashedDir dir_ ++ \"...\"");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",400,11,"(hashedDir dir_) ++ \"/\"","hashedDir dir_ ++ \"/\"");
idea("Warning: Redundant brackets","Darcs/Repository/HashedIO.lhs",401,10,"concat `fmap`\n  (mapM (listHashedContents \"cleaning up...\" c) hashroots)","concat `fmap`\n  mapM (listHashedContents \"cleaning up...\" c) hashroots");
idea("Warning: Use foldl","Darcs/Repository/Prefs.lhs",231,5,"abf fi (r : rs)\n  = abf (\\ f -> fi f && isNothing (matchRegex r f)) rs\nabf fi [] = fi","abf fi rs\n  = foldl (\\ fi r f -> fi f && isNothing (matchRegex r f)) fi rs");
idea("Error: Use concatMap","Darcs/Repository/Prefs.lhs",268,11,"concat $ map ext_regex exts","concatMap ext_regex exts");
idea("Warning: Eta reduce","Darcs/Repository/Prefs.lhs",268,11,"ext_regexes exts = concat $ map ext_regex exts","ext_regexes = concat . map ext_regex");
idea("Error: Use any","Darcs/Repository/Prefs.lhs",278,9,"or $ map (\\ r -> isJust $ matchRegex r f) regexes","any (\\ r -> isJust $ matchRegex r f) regexes");
idea("Warning: Redundant brackets","Darcs/Repository/Prefs.lhs",311,1,"if (prefs /= \"x\") then get_preffile $ prefs ++ p else return []","if prefs /= \"x\" then get_preffile $ prefs ++ p else return []");
idea("Error: Use when","Darcs/Repository/Prefs.lhs",320,43,"if haspref then mWriteBinFile (fp2fn $ prefs ++ p) (unlines ls)\n  else return ()","when haspref $ mWriteBinFile (fp2fn $ prefs ++ p) (unlines ls)");
idea("Warning: Redundant brackets","Darcs/Repository/Prefs.lhs",328,1,"if s == s' then (s : ss) else s' : add_to_list s ss","if s == s' then s : ss else s' : add_to_list s ss");
idea("Warning: Redundant brackets","Darcs/Repository/Prefs.lhs",346,1,"fst . (break (== ' '))","fst . break (== ' ')");
idea("Warning: Redundant brackets","Darcs/Repository/Prefs.lhs",350,1,"fst . (break (== ' '))","fst . break (== ' ')");
idea("Warning: Redundant brackets","Darcs/Repository/Prefs.lhs",373,34,"if\n  (NoSetDefault `notElem` opts &&\n     DryRun `notElem` opts && r_is_not_tmp)\n  then return True else\n  do olddef <- get_preflist \"defaultrepo\"\n     return (olddef == [])","if\n  NoSetDefault `notElem` opts &&\n    DryRun `notElem` opts && r_is_not_tmp\n  then return True else\n  do olddef <- get_preflist \"defaultrepo\"\n     return (olddef == [])");
idea("Error: Use isPrefixOf","Darcs/Repository/Prefs.lhs",441,22,"take 5 l == \"repo:\"","\"repo:\" `isPrefixOf` l");
idea("Error: Use isPrefixOf","Darcs/Repository/Prefs.lhs",442,22,"take 9 l == \"thisrepo:\"","\"thisrepo:\" `isPrefixOf` l");
idea("Error: Use isPrefixOf","Darcs/Repository/Prefs.lhs",444,22,"take 6 l == \"cache:\"","\"cache:\" `isPrefixOf` l");
idea("Error: Use isPrefixOf","Darcs/Repository/Prefs.lhs",445,22,"take 9 l == \"readonly:\"","\"readonly:\" `isPrefixOf` l");
idea("Error: Redundant do","win32/System/Posix.hs",17,53,"do allocaBytes 8 $\n     \\ p ->\n       do poke (castPtr p :: Ptr CTime) (atime)\n          poke (castPtr (plusPtr p 4) :: Ptr CTime) (mtime)\n          c_utime s p\n          return ()","allocaBytes 8 $\n  \\ p ->\n    do poke (castPtr p :: Ptr CTime) (atime)\n       poke (castPtr (plusPtr p 4) :: Ptr CTime) (mtime)\n       c_utime s p\n       return ()");
idea("Warning: Redundant brackets","win32/System/Posix.hs",18,20,"poke (castPtr p :: Ptr CTime) (atime)","poke (castPtr p :: Ptr CTime) atime");
idea("Warning: Redundant brackets","win32/System/Posix.hs",18,20,"poke (castPtr (plusPtr p 4) :: Ptr CTime) (mtime)","poke (castPtr (plusPtr p 4) :: Ptr CTime) mtime");
idea("Error: Redundant do","win32/System/Posix.hs",28,1,"do allocaBytes (sizeOf (undefined :: CTime)) $\n     \\ p ->\n       do c_ctime p\n          t <- peek p :: IO CTime\n          return t","allocaBytes (sizeOf (undefined :: CTime)) $\n  \\ p ->\n    do c_ctime p\n       t <- peek p :: IO CTime\n       return t");
idea("Error: Redundant return","win32/System/Posix.hs",29,50,"do c_ctime p\n   t <- peek p :: IO CTime\n   return t","do c_ctime p\n   peek p :: IO CTime");
// </CONTENT>

function idea(name,file,line,col,old,suggest)
{
	hints[name] = value(0, hints[name]) + 1;
	files[file] = value(0, files[file]) + 1;
	items[items.length+1] = {name:name, file:file, line:line, col:col, old:old, suggest:suggest};
}

function sum(xs)
{
	var n = 0;
	for (var i in xs)
		n += xs[i];
	return n;
}

function value(def, x)
{
	if (x) return x; else return def;
}

function show_item(x)
{
	var s = "";
	s += x.file + ":" + x.line + ":" + x.col + ": " + x.name + "<br/>";
	s += "Found:<br/><pre>" + x.old + "</pre>";
	s += "Why not:<br/><pre>" + x.suggest + "</pre><hr/>";
	return s;
}

function show_items(f)
{
	var s = "";
	for (i in items)
	{
		var x = items[i];
		if (f(x)) s += show_item(x);
	}
	return s;
}

function pick_link(i)
{
	document.getElementById("link_" + link_sel).style.fontWeight = "normal";
	document.getElementById("link_" + i).style.fontWeight = "bold";
	link_sel = i;
}

function show_hints(i, match)
{
	pick_link(i);
	var s = "";
	for (var i in hints)
	{
		if (i == match || match == "")
		{
			function f(x){return x.name == i};
			s += "<h2>" + i + "</h2>"
			s += show_items(f);
		}
	}
	document.getElementById('content').innerHTML = s;
}

function show_files(i, match)
{
	pick_link(i);
	var s = "";
	for (var i in files)
	{
		if (i == match || match == "")
		{
			function f(x){return x.file == i};
			s += "<h2>" + i + "</h2>"
			s += show_items(f);
		}
	}
	document.getElementById('content').innerHTML = s;
}

function on_load()
{
	function f(name,file,line,col,old,suggest)
	{
		hints[name] = value(0, hints[name]) + 1;
		files[file] = value(0, files[file]) + 1;
	}

	function shows(text, xs)
	{
		var s;
		link_count++;
		s = "<p><a id='link_" + link_count + "' href='javascript:show_" + text + "(" + link_count + ",\"\")'>All " + text + " (" + sum(xs) + ")</a></p><ul>";

		var ys = [];
		var j = 0;
		for (var i in xs)
			ys[j++] = i;
		ys.sort();

		for (var j in ys)
		{
			link_count++;
			var i = ys[j];
			s += "<li><a id='link_" + link_count + "' href='javascript:show_" + text + "(" + link_count + ",\"" + i + "\")'>" + i + " (" + xs[i] + ")</a></li>";
		}
		s += "</ul>";
		return s;
	}

	var s = shows("hints",hints) + shows("files",files);
	document.getElementById('leftbar').innerHTML = s;

	show_hints(1,"");
}
</script>
<style type="text/css">
/* See http://www.webreference.com/programming/css_frames/ */
body {
  margin:0;
  border:0;
  padding:0;
  height:100%;
  max-height:100%;
  font-family: sans-serif;
  font-size:76%;
  overflow: hidden;
}

h1 {
  position:absolute;
  top:0;
  left:0;
  width:100%;
  height:35px;
  overflow:auto;
  padding: 0;
  padding-left: 10px;
  margin: 0;
}

#leftbar {
  position:absolute;
  top:30px;
  left:0;
  width: 215px;
  bottom: 0px;
  overflow:auto;
  background:rgb(202,223,255);
  margin: 10px;
  padding-top: 0;
  padding-left: 7px;
  padding-right: 7px;
  -moz-border-radius: 5px;
}

#content {
  position:absolute;
  top:35px;
  left:250px;
  bottom:0;
  right:0;
  overflow:auto;
  padding-bottom: 15px;
}

#leftbar ul {margin-top: 0px; padding-left: 15px;}
#leftbar p {margin-bottom: 0px;}

pre{
	font-family: "lucida console", monospace;
}

</style>
</head>
<body onload='on_load()'>
<h1><a href="http://community.haskell.org/~ndm/hlint/">HLint</a> report</h1>

<div id="leftbar" valign="top" style="min-width:200px">leftbar</div>
<div id="content" valign="top" width="100%">content</div>
</body>
</html>
