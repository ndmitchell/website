*type=	paper

page=   supero
url=    paper-a_supercompiler_for_core_haskell-01_may_2008.pdf
title=  A Supercompiler for Core Haskell
date=   01 May 2008
where=  <a href="http://proglang.informatik.uni-freiburg.de/IFL2007/">IFL 2007</a> post proceedings
author= Neil Mitchell and Colin Runciman
@pages=147-164
@booktitle=IFL 2007
@editor=Olaf Chitil et al.
@series=LNCS
@volume=3015
@publisher=Springer-Verlag
text=
    Haskell is a functional language, with features such as higher
    order functions and lazy evaluation, which allow succinct programs. These
    high-level features present many challenges for optimising compilers. We
    report practical experiments using novel variants of supercompilation,
    with special attention to let bindings and the generalisation technique.


page=   derive
url=    paper-deriving_generic_functions_by_example-26_oct_2007.pdf
title=  Deriving Generic Functions by Example
date=   26 Oct 2007
where=  <a href="http://www.cs.york.ac.uk/yds/">York Doctoral Symposium 2007</a>
@pages=55-62
@publisher=Tech. Report YCS-2007-421, Dept. of Computer Science, University of York, UK
@editor=Jan Tobias M\"{u}hlberg and Juan Ignacio Perna
text=
    A function is said to be generic if it operates over values of
    any data type. For example, a generic equality function can test pairs of
    booleans, integers, lists, trees etc. In most languages programmers must
    define generic functions multiple times, specialised for each data type.
    Alternatively, a tool could be used to specify the relationship between the
    data type and the implementation, but this relationship may be complex.
    This paper describes a solution: given a single example of the generic
    function on one data type, we can infer the relationship between a data
    type and the implementation. We have used our method in the Derive
    tool, allowing the implementation of 60% of the generic functions to be
    inferred.


page=   uniplate
url=    paper-uniform_boilerplate_and_list_processing-30_sep_2007.pdf
title=  Uniform Boilerplate and List Processing
date=   30 Sep 2007
where=  <a href="http://www.cse.unsw.edu.au/~keller/haskellws/HaskellWorkshop.html">Haskell Workshop 2007</a>
author= Neil Mitchell and Colin Runciman
@booktitle=Haskell '07: Proceedings of the ACM SIGPLAN workshop on Haskell workshop
@pages=49-60
@location=Freiburg, Germany
@doi=http://doi.acm.org/10.1145/1291201.1291208
@publisher=ACM
@isbn=978-1-59593-674-5
text=
    Generic traversals over recursive data structures are often referred
    to as boilerplate code. The definitions of functions involving such
    traversals may repeat very similar patterns, but with variations for
    different data types and different functionality. Libraries of operations
    abstracting away boilerplate code typically rely on elaborate
    types to make operations generic. The motivating observation for
    this paper is that most traversals have value-specific behaviour for
    just one type. We present the design of a new library exploiting
    this assumption. Our library allows concise expression of traversals
    with competitive performance.


page=   supero
url=    paper-supero_making_haskell_faster-27_sep_2007.pdf
title=  Supero: Making Haskell Faster
date=   27 Sep 2007
where=  <a href="http://proglang.informatik.uni-freiburg.de/IFL2007/">IFL 2007</a>
author= Neil Mitchell and Colin Runciman
@booktitle=IFL 2007: Draft Proceedings of the 19th International Symposium on Implementation and Application of Functional Languages
@location=Freiburg, Germany
@publisher=Tech. Report No. 12-07 of the Computing Laboratory, University of Kent, UK
@editor=Olaf Chitil
@pages=334-349
text=
    Haskell is a functional language, with features such as higher
    order functions and lazy evaluation, which allow succinct programs. These
    high-level features are difficult for fast execution, but GHC is a mature
    and widely used optimising compiler. This paper presents a whole-program
    approach to optimisation, which produces speed improvements
    of between 10% and 60% when used with GHC, on eight benchmarks.


page=   yhc
url=    paper-yhc_core-30_apr_2007.pdf
title=  Yhc.Core - from Haskell to Core
date=   30 Apr 2007
where=  The <a href="http://www.haskell.org/haskellwiki/The_Monad.Reader">Monad.Reader</a>
author= Dimitry Golubovsky and Neil Mitchell and Matthew Naylor
@at=article
@journal=The Monad.Reader
@number=7
@pages=45-61
text=
    The Yhc compiler is a hot-bed of new and interesting ideas. We present Yhc.Core
    - one of the most popular libraries from Yhc. We describe what we think makes
    Yhc.Core special, and how people have used it in various projects including an
    evaluator, and a Javascript code generator.


page=   catch
url=    paper-a_static_checker_for_safe_pattern_matching_in_haskell-01_feb_2007.pdf
title=  A Static Checker for Safe Pattern Matching in Haskell
date=   01 Feb 2007
where=  <a href="http://www.niii.ru.nl/~marko/tfp05/">TFP 2005</a> post proceedings
author= Neil Mitchell and Colin Runciman
@publisher=Intellect
@booktitle=Trends in Functional Programming
@volume=6
@isbn=978-1-84150-176-5
text=
    A Haskell program may fail at runtime with a pattern-match error if
    the program has any incomplete (non-exhaustive) patterns in definitions or case
    alternatives. This paper describes a static checker that allows non-exhaustive patterns
    to exist, yet ensures that a pattern-match error does not occur. It describes a
    constraint language that can be used to reason about pattern matches, along with
    mechanisms to propagate these constraints between program components.


page=   catch
url=    paper-unfailing_haskell_a_static_checker_for_pattern_matching-24_sep_2005.pdf
title=  Unfailing Haskell: A Static Checker for Pattern Matching
date=   24 Sep 2005
where=  <a href="http://www.niii.ru.nl/~marko/tfp05/">TFP 2005</a>
author= Neil Mitchell and Colin Runciman
@booktitle=Proceedings of the Sixth Symposium on Trends in Functional Programming
@pages=313-328
text=
    A Haskell program may fail at runtime with a pattern-match error if the program has
    any incomplete (non-exhaustive) patterns in definitions or case alternatives. This paper
    describes a static checker that allows non-exhaustive patterns to exist, yet ensures
    that a pattern-match error does not occur. It describes a constraint language that can
    be used to reason about pattern matches, along with mechanisms to propagate these
    constraints between program components.


page=   hat
url=    paper-hatday-28_oct_2005.pdf
title=  Visual Hat
date=   28 Oct 2005
@booktitle=Hat Day 2005: work in progress on the Hat tracing system for Haskell
@pages=23-26
@publisher=Tech. Report YCS-2005-395, Dept. of Computer Science, University of York, UK
@editor=Colin Runciman
text=
    This paper describes a new approach to visualizing
    the data contained in Hat traces. The aim is to cater for Windows
    users who are more familiar with graphical debugging tools.


page=   thesis
url=    paper-qualifying_dissertation-30_jun_2005.pdf
title=  Qualifying Dissertation: Unfailing Haskell
date=   30 Jun 2005
@at=misc
@institution=University of York
text=
    Programs written in Haskell may fail at runtime with either a
    pattern match error, or with non-termination. Both of these can be
    thought of as giving the value $\bot$ as a result. Other forms of
    failure, for example heap exhaustion, are not considered.

    The first section of this document reviews previous work, including
    total functional programming and sized types. Attention is paid to
    termination checkers for both Prolog and various functional
    languages.

    The main result from work so far is a static checker for pattern
    match errors that allows non-exhaustive patterns to exist, yet
    ensures that a pattern match error does not occur. It includes a
    constraint language that can be used to reason about pattern
    matches, along with mechanisms to propagate these constraints
    between program components.

    The proposal deals with future work to be done. It gives an
    approximate timetable for the design and implementation of a static
    checker for termination and pattern match errors.
