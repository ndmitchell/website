*type=  draft

page=   parsing
url=    draft-parser_design-17_nov_2004.pdf
title=  Parser Design
date=   17 Nov 2004
note=   very early notes on my ideas regarding parsing.

page=   firstify
url=    draft-losing_functions_without_gaining_data-02_mar_2009.pdf
title=  Losing Functions without Gaining Data
date=   02 Mar 2009
note=   submitted to <a href="http://www.cs.nott.ac.uk/~gmh/icfp09.html">ICFP 2009</a>.
text=
    We describe a transformation which takes a higher-order program,
    and a produces an equivalent first-order program. Unlike Reynolds
    style defunctionalisation, it does not introduce any new data types,
    and the results are more amenable to subsequent analysis operations.
    Our transformation is implemented, and works on a Core
    language to which Haskell programs can be reduced. Our method
    cannot always succeed in removing all functional values, but in
    practice is remarkably successful.
